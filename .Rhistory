# this function will run through a bunch of years and compare the results to whatever model is stored
# in trainedmodel. trainedmodel should be of class "lm" or "glm".
# years should be a vector of years, for example: years=c("2008","2009","2010","2012")
for (i in 1:length(years)) {
newyear<-years[i]
newdata<-read.csv(paste("~/R/R Projects/data/",newyear,"/DAT_ASCII_EURUSD_M1_",newyear,".csv",sep=""), sep=";", quote="\"")
names(newdata)<-c("time_stamp","open_bid","high_bid","low_bid","close_bid","volume")
firstnewdate<-substr(newdata$time_stamp[1],0,8)
firstnewdate<-paste(substr(firstnewdate,0,4),"-",substr(firstnewdate,5,6),"-",substr(firstnewdate,7,8),"/",sep="")
cat(firstnewdate)
newLHS<-makeLHS(newdata)
head(newLHS)
newdf<-na.omit(merge.xts(Op(newLHS),OpCl(IPC[firstnewdate]),join="left"))
names(newdf)<-c("LHS.Open","OpCl.IPC")
newdf<-merge.xts(newdf,OpCl(DOW),join="inner")
newdf<-merge.xts(newdf,OpCl(BSESN),join="inner")
newdf<-merge.xts(newdf,OpCl(GDAXI),join="inner")
newdf<-merge.xts(newdf,OpCl(SSMI),join="inner")
newdf<-merge.xts(newdf,OpCl(TA100),join="inner")
newdf<-merge.xts(newdf,na.omit(Return.calculate(DEXUSAL)),join="inner") # AUDUSD
newdf<-merge.xts(newdf,na.omit(Return.calculate(DEXINUS)),join="inner") # USDINR
newdf<-merge.xts(newdf,na.omit(Return.calculate(DEXBZUS)),join="inner") # USDBRL
newdf<-merge.xts(newdf,na.omit(Return.calculate(DEXCAUS)),join="inner") # USDCAD
newdf<-merge.xts(newdf,na.omit(Return.calculate(DEXUSEU)),join="inner") # EURUSD
newdf<-merge.xts(newdf,na.omit(Return.calculate(DEXJPUS)),join="inner") # USDJPY
newdf<-merge.xts(newdf,na.omit(Return.calculate(DEXMXUS)),join="inner") # USDMXN
newdf<-merge.xts(newdf,na.omit(Return.calculate(DEXKOUS)),join="inner") # USDKRW
head(newdf)
newmod<-lm(traindedmodel,data=newdf)
newactuals<-as.vector(newdf$LHS.Open)
newfitted<-as.vector(fitted(newmod))
plot(newactuals,type="l",col="dark grey",main=paste("Fit vs. Actuals in Year= ",years[i]))
lines(newfitted,col="blue")
retlist<-list()
retlist[[i]]<-data.frame(newfitted,newactuals,sign(newfitted)*sign(newactuals))
#names(retlist[[i]])<-c("fitted","actual","sig.perf")
cat("First run complete. Starting next sample year.")
}
cat("Finished. Returning data list and exiting.")
return(retlist)
}
out<-runSamples(sample.years,sample.model)
runSamples<-function(years,trainedmodel){
# this function will run through a bunch of years and compare the results to whatever model is stored
# in trainedmodel. trainedmodel should be of class "lm" or "glm".
# years should be a vector of years, for example: years=c("2008","2009","2010","2012")
for (i in 1:length(years)) {
newyear<-years[i]
newdata<-read.csv(paste("~/R/R Projects/data/",newyear,"/DAT_ASCII_EURUSD_M1_",newyear,".csv",sep=""), sep=";", quote="\"")
names(newdata)<-c("time_stamp","open_bid","high_bid","low_bid","close_bid","volume")
firstnewdate<-substr(newdata$time_stamp[1],0,8)
firstnewdate<-paste(substr(firstnewdate,0,4),"-",substr(firstnewdate,5,6),"-",substr(firstnewdate,7,8),"/",sep="")
cat(firstnewdate)
newLHS<-makeLHS(newdata)
head(newLHS)
newdf<-na.omit(merge.xts(Op(newLHS),OpCl(IPC[firstnewdate]),join="left"))
names(newdf)<-c("LHS.Open","OpCl.IPC")
newdf<-merge.xts(newdf,OpCl(DOW),join="inner")
newdf<-merge.xts(newdf,OpCl(BSESN),join="inner")
newdf<-merge.xts(newdf,OpCl(GDAXI),join="inner")
newdf<-merge.xts(newdf,OpCl(SSMI),join="inner")
newdf<-merge.xts(newdf,OpCl(TA100),join="inner")
newdf<-merge.xts(newdf,na.omit(Return.calculate(DEXUSAL)),join="inner") # AUDUSD
newdf<-merge.xts(newdf,na.omit(Return.calculate(DEXINUS)),join="inner") # USDINR
newdf<-merge.xts(newdf,na.omit(Return.calculate(DEXBZUS)),join="inner") # USDBRL
newdf<-merge.xts(newdf,na.omit(Return.calculate(DEXCAUS)),join="inner") # USDCAD
newdf<-merge.xts(newdf,na.omit(Return.calculate(DEXUSEU)),join="inner") # EURUSD
newdf<-merge.xts(newdf,na.omit(Return.calculate(DEXJPUS)),join="inner") # USDJPY
newdf<-merge.xts(newdf,na.omit(Return.calculate(DEXMXUS)),join="inner") # USDMXN
newdf<-merge.xts(newdf,na.omit(Return.calculate(DEXKOUS)),join="inner") # USDKRW
head(newdf)
newmod<-lm(traindedmodel,data=newdf)
newactuals<-as.vector(newdf$LHS.Open)
newfitted<-as.vector(fitted(newmod))
plot(newactuals,type="l",col="dark grey",main=paste("Fit vs. Actuals in Year= ",years[i]))
lines(newfitted,col="blue")
retlist<-list()
retlist[[i]]<-data.frame(newfitted,newactuals,sign(newfitted)*sign(newactuals))
#names(retlist[[i]])<-c("fitted","actual","sig.perf")
cat("First run complete. Starting next sample year.","\n")
}
cat("Finished. Returning data list and exiting.","\n")
return(retlist)
}
head(out[[1]]_)
head(out[[1]])
summary(out)
head(out[[3]])
runSamples<-function(years,trainedmodel){
# this function will run through a bunch of years and compare the results to whatever model is stored
# in trainedmodel. trainedmodel should be of class "lm" or "glm".
# years should be a vector of years, for example: years=c("2008","2009","2010","2012")
for (i in 1:length(years)) {
newyear<-years[i]
newdata<-read.csv(paste("~/R/R Projects/data/",newyear,"/DAT_ASCII_EURUSD_M1_",newyear,".csv",sep=""), sep=";", quote="\"")
names(newdata)<-c("time_stamp","open_bid","high_bid","low_bid","close_bid","volume")
firstnewdate<-substr(newdata$time_stamp[1],0,8)
firstnewdate<-paste(substr(firstnewdate,0,4),"-",substr(firstnewdate,5,6),"-",substr(firstnewdate,7,8),"/",sep="")
cat(firstnewdate)
newLHS<-makeLHS(newdata)
head(newLHS)
newdf<-na.omit(merge.xts(Op(newLHS),OpCl(IPC[firstnewdate]),join="left"))
names(newdf)<-c("LHS.Open","OpCl.IPC")
newdf<-merge.xts(newdf,OpCl(DOW),join="inner")
newdf<-merge.xts(newdf,OpCl(BSESN),join="inner")
newdf<-merge.xts(newdf,OpCl(GDAXI),join="inner")
newdf<-merge.xts(newdf,OpCl(SSMI),join="inner")
newdf<-merge.xts(newdf,OpCl(TA100),join="inner")
newdf<-merge.xts(newdf,na.omit(Return.calculate(DEXUSAL)),join="inner") # AUDUSD
newdf<-merge.xts(newdf,na.omit(Return.calculate(DEXINUS)),join="inner") # USDINR
newdf<-merge.xts(newdf,na.omit(Return.calculate(DEXBZUS)),join="inner") # USDBRL
newdf<-merge.xts(newdf,na.omit(Return.calculate(DEXCAUS)),join="inner") # USDCAD
newdf<-merge.xts(newdf,na.omit(Return.calculate(DEXUSEU)),join="inner") # EURUSD
newdf<-merge.xts(newdf,na.omit(Return.calculate(DEXJPUS)),join="inner") # USDJPY
newdf<-merge.xts(newdf,na.omit(Return.calculate(DEXMXUS)),join="inner") # USDMXN
newdf<-merge.xts(newdf,na.omit(Return.calculate(DEXKOUS)),join="inner") # USDKRW
head(newdf)
newmod<-lm(traindedmodel,data=newdf)
newactuals<-as.vector(newdf$LHS.Open)
newfitted<-as.vector(fitted(newmod))
plot(newactuals,type="l",col="dark grey",main=paste("Fit vs. Actuals in Year= ",years[i]))
lines(newfitted,col="blue")
retlist<-list()
retlist[[i]]<-cbind(newfitted,newactuals,sign(newfitted)*sign(newactuals))
names(retlist[[i]])<-c("fitted","actual","sig.perf")
cat("First run complete. Starting next sample year.","\n")
}
cat("Finished. Returning data list and exiting.","\n")
return(retlist)
}
out<-runSamples(sample.years,sample.model)
summary(out)
head(out[[3]])
runSamples<-function(years,trainedmodel){
# this function will run through a bunch of years and compare the results to whatever model is stored
# in trainedmodel. trainedmodel should be of class "lm" or "glm".
# years should be a vector of years, for example: years=c("2008","2009","2010","2012")
retlist<-list()
for (i in 1:length(years)) {
newyear<-years[i]
newdata<-read.csv(paste("~/R/R Projects/data/",newyear,"/DAT_ASCII_EURUSD_M1_",newyear,".csv",sep=""), sep=";", quote="\"")
names(newdata)<-c("time_stamp","open_bid","high_bid","low_bid","close_bid","volume")
firstnewdate<-substr(newdata$time_stamp[1],0,8)
firstnewdate<-paste(substr(firstnewdate,0,4),"-",substr(firstnewdate,5,6),"-",substr(firstnewdate,7,8),"/",sep="")
cat(firstnewdate)
newLHS<-makeLHS(newdata)
head(newLHS)
newdf<-na.omit(merge.xts(Op(newLHS),OpCl(IPC[firstnewdate]),join="left"))
names(newdf)<-c("LHS.Open","OpCl.IPC")
newdf<-merge.xts(newdf,OpCl(DOW),join="inner")
newdf<-merge.xts(newdf,OpCl(BSESN),join="inner")
newdf<-merge.xts(newdf,OpCl(GDAXI),join="inner")
newdf<-merge.xts(newdf,OpCl(SSMI),join="inner")
newdf<-merge.xts(newdf,OpCl(TA100),join="inner")
newdf<-merge.xts(newdf,na.omit(Return.calculate(DEXUSAL)),join="inner") # AUDUSD
newdf<-merge.xts(newdf,na.omit(Return.calculate(DEXINUS)),join="inner") # USDINR
newdf<-merge.xts(newdf,na.omit(Return.calculate(DEXBZUS)),join="inner") # USDBRL
newdf<-merge.xts(newdf,na.omit(Return.calculate(DEXCAUS)),join="inner") # USDCAD
newdf<-merge.xts(newdf,na.omit(Return.calculate(DEXUSEU)),join="inner") # EURUSD
newdf<-merge.xts(newdf,na.omit(Return.calculate(DEXJPUS)),join="inner") # USDJPY
newdf<-merge.xts(newdf,na.omit(Return.calculate(DEXMXUS)),join="inner") # USDMXN
newdf<-merge.xts(newdf,na.omit(Return.calculate(DEXKOUS)),join="inner") # USDKRW
head(newdf)
newmod<-lm(traindedmodel,data=newdf)
newactuals<-as.vector(newdf$LHS.Open)
newfitted<-as.vector(fitted(newmod))
plot(newactuals,type="l",col="dark grey",main=paste("Fit vs. Actuals in Year= ",years[i]))
lines(newfitted,col="blue")
retlist[[i]]<-cbind(newfitted,newactuals,sign(newfitted)*sign(newactuals))
names(retlist[[i]])<-c("fitted","actual","sig.perf")
cat("First run complete. Starting next sample year.","\n")
}
cat("Finished. Returning data list and exiting.","\n")
return(retlist)
}
out<-runSamples(sample.years,sample.model)
head(out)
head(out[[1]])
names(out[[1]])
class(out[[1]])
runSamples<-function(years,trainedmodel){
# this function will run through a bunch of years and compare the results to whatever model is stored
# in trainedmodel. trainedmodel should be of class "lm" or "glm".
# years should be a vector of years, for example: years=c("2008","2009","2010","2012")
retlist<-list()
for (i in 1:length(years)) {
newyear<-years[i]
newdata<-read.csv(paste("~/R/R Projects/data/",newyear,"/DAT_ASCII_EURUSD_M1_",newyear,".csv",sep=""), sep=";", quote="\"")
names(newdata)<-c("time_stamp","open_bid","high_bid","low_bid","close_bid","volume")
firstnewdate<-substr(newdata$time_stamp[1],0,8)
firstnewdate<-paste(substr(firstnewdate,0,4),"-",substr(firstnewdate,5,6),"-",substr(firstnewdate,7,8),"/",sep="")
cat(firstnewdate)
newLHS<-makeLHS(newdata)
head(newLHS)
newdf<-na.omit(merge.xts(Op(newLHS),OpCl(IPC[firstnewdate]),join="left"))
names(newdf)<-c("LHS.Open","OpCl.IPC")
newdf<-merge.xts(newdf,OpCl(DOW),join="inner")
newdf<-merge.xts(newdf,OpCl(BSESN),join="inner")
newdf<-merge.xts(newdf,OpCl(GDAXI),join="inner")
newdf<-merge.xts(newdf,OpCl(SSMI),join="inner")
newdf<-merge.xts(newdf,OpCl(TA100),join="inner")
newdf<-merge.xts(newdf,na.omit(Return.calculate(DEXUSAL)),join="inner") # AUDUSD
newdf<-merge.xts(newdf,na.omit(Return.calculate(DEXINUS)),join="inner") # USDINR
newdf<-merge.xts(newdf,na.omit(Return.calculate(DEXBZUS)),join="inner") # USDBRL
newdf<-merge.xts(newdf,na.omit(Return.calculate(DEXCAUS)),join="inner") # USDCAD
newdf<-merge.xts(newdf,na.omit(Return.calculate(DEXUSEU)),join="inner") # EURUSD
newdf<-merge.xts(newdf,na.omit(Return.calculate(DEXJPUS)),join="inner") # USDJPY
newdf<-merge.xts(newdf,na.omit(Return.calculate(DEXMXUS)),join="inner") # USDMXN
newdf<-merge.xts(newdf,na.omit(Return.calculate(DEXKOUS)),join="inner") # USDKRW
head(newdf)
newmod<-lm(traindedmodel,data=newdf)
newactuals<-as.vector(newdf$LHS.Open)
newfitted<-as.vector(fitted(newmod))
plot(newactuals,type="l",col="dark grey",main=paste("Fit vs. Actuals in Year= ",years[i]))
lines(newfitted,col="blue")
retlist[[i]]<-as.data.frame(cbind(newfitted,newactuals,sign(newfitted)*sign(newactuals)))
names(retlist[[i]])<-c("fitted","actual","sig.perf")
cat("First run complete. Starting next sample year.","\n")
}
cat("Finished. Returning data list and exiting.","\n")
return(retlist)
}
out<-runSamples(sample.years,sample.model)
head(out[[1]])
head(out[[2]])
head(out[[3]])
length(out)
for (i in 1:length(out)){
head(out[[i]])
}
for (i in 1:length(out)){
head(out[[i]])
}
for (i in 1:length(out)){
print(head(out[[i]]))
}
head(out[[1]]_)
head(out[[3]])
err1<-subset(out[[1]]$actual-out[[1]]$fitted,select=c(out[[1]]$sig.perf<0))
err1<-subset(out[[1]]$actual-out[[1]]$fitted,subset=c(out[[1]]$sig.perf<0))
plot(err1)
plot(err1,type="l")
head(err1)
length(err1)
plot(density(err1))
summary(err1)
length(out[[1]])
length(out[[1]]$fitted)
79/219
9.9e-05
err1<-subset(abs(out[[1]]$actual)+abs(out[[1]]$fitted),subset=c(out[[1]]$sig.perf<0))
plot(density(err1))
err1<-subset(-1*(abs(out[[1]]$actual)+abs(out[[1]]$fitted)),subset=c(out[[1]]$sig.perf<0))
plot(density(err1))
mean(err1)
sd(err1)
merr<-lapply(err,MARGIN=2,FUN=mean)
err<-list()
for (i in 1:length(out)){
err[[i]]<-subset(-1*(abs(out[[i]]$actual)+abs(out[[i]]$fitted)),subset=c(out[[i]]$sig.perf<0))
}
err[[1]]
merr<-lapply(err,MARGIN=2,FUN=mean)
plot(merr,type="l",col="red")
head(merr)
merr<-apply(err,MARGIN=2,FUN=mean)
merr<-sapply(err,MARGIN=2,FUN=mean)
head(merr)
plot(density(merr),type="l",col="red")
plot(density(err[[1]]),type="l",col="dark grey")
lines(density(err[[2]],col="dark grey"))
lines(density(err[[3]],col="dark grey"))
plot(density(err[[1]]),type="l",col="dark grey")
lines(density(err[[2]],type="l",col="dark grey"))
lines(density(err[[3]],col="dark grey"))
merr<-sapply(err,MARGIN=2,FUN=mean)
lines(density(merr),col="red")
summary(err[[1]])
summary(err[[2]])
summary(err[[3]])
??densitycompare
??density
require(sm)
install.packages("sm")
require(sm)
sm.density.compare(err[[1]],err[[2]],err[[3]])
head(err[[1]])
mean(err1)
mean(err2)
mean(err[[1]])
mean(err[[2]])
mean(err[[3]])
plot(density(err[[1]]),type="l",col="dark grey")
lines(density(err[[2]],type="l",col="dark grey"))
lines(density(err[[3]],col="dark grey"))
merr<-sapply(err,MARGIN=2,FUN=mean)
lines(density(merr),col="red")
head(err[[1]])
head(out[[1]])
head(newdf)
head(newdata.df)
head(new.df)
head(index(new.df,0))
head(newdf)
runSamples<-function(years,trainedmodel){
# this function will run through a bunch of years and compare the results to whatever model is stored
# in trainedmodel. trainedmodel should be of class "lm" or "glm".
# years should be a vector of years, for example: years=c("2008","2009","2010","2012")
retlist<-list()
for (i in 1:length(years)) {
newyear<-years[i]
newdata<-read.csv(paste("~/R/R Projects/data/",newyear,"/DAT_ASCII_EURUSD_M1_",newyear,".csv",sep=""), sep=";", quote="\"")
names(newdata)<-c("time_stamp","open_bid","high_bid","low_bid","close_bid","volume")
firstnewdate<-substr(newdata$time_stamp[1],0,8)
firstnewdate<-paste(substr(firstnewdate,0,4),"-",substr(firstnewdate,5,6),"-",substr(firstnewdate,7,8),"/",sep="")
cat(firstnewdate)
newLHS<-makeLHS(newdata)
head(newLHS)
newdf<-na.omit(merge.xts(Op(newLHS),OpCl(IPC[firstnewdate]),join="left"))
names(newdf)<-c("LHS.Open","OpCl.IPC")
newdf<-merge.xts(newdf,OpCl(DOW),join="inner")
newdf<-merge.xts(newdf,OpCl(BSESN),join="inner")
newdf<-merge.xts(newdf,OpCl(GDAXI),join="inner")
newdf<-merge.xts(newdf,OpCl(SSMI),join="inner")
newdf<-merge.xts(newdf,OpCl(TA100),join="inner")
newdf<-merge.xts(newdf,na.omit(Return.calculate(DEXUSAL)),join="inner") # AUDUSD
newdf<-merge.xts(newdf,na.omit(Return.calculate(DEXINUS)),join="inner") # USDINR
newdf<-merge.xts(newdf,na.omit(Return.calculate(DEXBZUS)),join="inner") # USDBRL
newdf<-merge.xts(newdf,na.omit(Return.calculate(DEXCAUS)),join="inner") # USDCAD
newdf<-merge.xts(newdf,na.omit(Return.calculate(DEXUSEU)),join="inner") # EURUSD
newdf<-merge.xts(newdf,na.omit(Return.calculate(DEXJPUS)),join="inner") # USDJPY
newdf<-merge.xts(newdf,na.omit(Return.calculate(DEXMXUS)),join="inner") # USDMXN
newdf<-merge.xts(newdf,na.omit(Return.calculate(DEXKOUS)),join="inner") # USDKRW
head(newdf)
dts<-index(newdf,0)
newmod<-lm(traindedmodel,data=newdf)
newactuals<-as.vector(newdf$LHS.Open)
newfitted<-as.vector(fitted(newmod))
plot(newactuals,type="l",col="dark grey",main=paste("Fit vs. Actuals in Year= ",years[i]))
lines(newfitted,col="blue")
retlist[[i]]<-as.data.frame(cbind(dts,newfitted,newactuals,sign(newfitted)*sign(newactuals)))
names(retlist[[i]])<-c("fitted","actual","sig.perf")
cat("First run complete. Starting next sample year.","\n")
}
cat("Finished. Returning data list and exiting.","\n")
return(retlist)
}
out<-runSamples(sample.years,sample.model)
head(out[[1]])
head(newdf)
temp<-as.Date(out[[1]]$fitted)
head(temp)
runSamples<-function(years,trainedmodel){
# this function will run through a bunch of years and compare the results to whatever model is stored
# in trainedmodel. trainedmodel should be of class "lm" or "glm".
# years should be a vector of years, for example: years=c("2008","2009","2010","2012")
retlist<-list()
for (i in 1:length(years)) {
newyear<-years[i]
newdata<-read.csv(paste("~/R/R Projects/data/",newyear,"/DAT_ASCII_EURUSD_M1_",newyear,".csv",sep=""), sep=";", quote="\"")
names(newdata)<-c("time_stamp","open_bid","high_bid","low_bid","close_bid","volume")
firstnewdate<-substr(newdata$time_stamp[1],0,8)
firstnewdate<-paste(substr(firstnewdate,0,4),"-",substr(firstnewdate,5,6),"-",substr(firstnewdate,7,8),"/",sep="")
cat(firstnewdate)
newLHS<-makeLHS(newdata)
head(newLHS)
newdf<-na.omit(merge.xts(Op(newLHS),OpCl(IPC[firstnewdate]),join="left"))
names(newdf)<-c("LHS.Open","OpCl.IPC")
newdf<-merge.xts(newdf,OpCl(DOW),join="inner")
newdf<-merge.xts(newdf,OpCl(BSESN),join="inner")
newdf<-merge.xts(newdf,OpCl(GDAXI),join="inner")
newdf<-merge.xts(newdf,OpCl(SSMI),join="inner")
newdf<-merge.xts(newdf,OpCl(TA100),join="inner")
newdf<-merge.xts(newdf,na.omit(Return.calculate(DEXUSAL)),join="inner") # AUDUSD
newdf<-merge.xts(newdf,na.omit(Return.calculate(DEXINUS)),join="inner") # USDINR
newdf<-merge.xts(newdf,na.omit(Return.calculate(DEXBZUS)),join="inner") # USDBRL
newdf<-merge.xts(newdf,na.omit(Return.calculate(DEXCAUS)),join="inner") # USDCAD
newdf<-merge.xts(newdf,na.omit(Return.calculate(DEXUSEU)),join="inner") # EURUSD
newdf<-merge.xts(newdf,na.omit(Return.calculate(DEXJPUS)),join="inner") # USDJPY
newdf<-merge.xts(newdf,na.omit(Return.calculate(DEXMXUS)),join="inner") # USDMXN
newdf<-merge.xts(newdf,na.omit(Return.calculate(DEXKOUS)),join="inner") # USDKRW
head(newdf)
dts<-as.Date(index(newdf,0))
newmod<-lm(traindedmodel,data=newdf)
newactuals<-as.vector(newdf$LHS.Open)
newfitted<-as.vector(fitted(newmod))
plot(newactuals,type="l",col="dark grey",main=paste("Fit vs. Actuals in Year= ",years[i]))
lines(newfitted,col="blue")
retlist[[i]]<-as.data.frame(cbind(dts,newfitted,newactuals,sign(newfitted)*sign(newactuals)))
names(retlist[[i]])<-c("date","fitted","actual","sig.perf")
cat("First run complete. Starting next sample year.","\n")
}
cat("Finished. Returning data list and exiting.","\n")
return(retlist)
}
out<-runSamples(sample.years,sample.model)
head(out[[1]]_)
head(out[[1]])
profit<-out[[1]]$sig.perf*abs(out[[1]]$actual)
head(profit)
plot(profit)
profit<-makeIndex(profit,inv=FALSE,ret=TRUE)
plot(profit)
plot(profit,type="l")
head(profit)
class(profit)
mode(profit)
profit
head(out[[1]])
profit<-xts(out[[1]]$sig.perf*abs(out[[1]]$actual),out[[1]]$date)
profit<-xts(out[[1]]$sig.perf*abs(out[[1]]$actual),as.Date(out[[1]]$date))
head(profit)
profit<-makeIndex(profit,inv=FALSE,ret=TRUE)
head(profit)
plot.xts(profit)
profit2<-xts(out[[2]]$sig.perf*abs(out[[2]]$actual),as.Date(out[[2]]$date))
profit2<-makeIndex(profit1,inv=FALSE,ret=TRUE)
profit1<-xts(out[[1]]$sig.perf*abs(out[[1]]$actual),as.Date(out[[1]]$date))
profit1<-makeIndex(profit1,inv=FALSE,ret=TRUE)
profit2<-xts(out[[2]]$sig.perf*abs(out[[2]]$actual),as.Date(out[[2]]$date))
profit2<-makeIndex(profit2,inv=FALSE,ret=TRUE)
plot.xts(profit2)
profit1<-xts(out[[1]]$sig.perf*abs(out[[1]]$actual),as.Date(out[[1]]$date))
profit2<-xts(out[[2]]$sig.perf*abs(out[[2]]$actual),as.Date(out[[2]]$date))
temp<-append(profit1,profit2)
head(temp)
tail(temp)
par(mfrow=c(2,2))
profit1<-xts(out[[1]]$sig.perf*abs(out[[1]]$actual),as.Date(out[[1]]$date))
profit1<-makeIndex(profit1,inv=FALSE,ret=TRUE)
plot.xts(profit3)
profit2<-xts(out[[2]]$sig.perf*abs(out[[2]]$actual),as.Date(out[[2]]$date))
profit2<-makeIndex(profit2,inv=FALSE,ret=TRUE)
plot.xts(profit2)
profit3<-xts(out[[3]]$sig.perf*abs(out[[3]]$actual),as.Date(out[[3]]$date))
profit3<-makeIndex(profit3,inv=FALSE,ret=TRUE)
plot.xts(profit3)
par(mfrow=c(2,2))
profit1<-xts(out[[1]]$sig.perf*abs(out[[1]]$actual),as.Date(out[[1]]$date))
profit1<-makeIndex(profit1,inv=FALSE,ret=TRUE)
plot.xts(profit1)
profit2<-xts(out[[2]]$sig.perf*abs(out[[2]]$actual),as.Date(out[[2]]$date))
profit2<-makeIndex(profit2,inv=FALSE,ret=TRUE)
plot.xts(profit2)
profit3<-xts(out[[3]]$sig.perf*abs(out[[3]]$actual),as.Date(out[[3]]$date))
profit3<-makeIndex(profit3,inv=FALSE,ret=TRUE)
plot.xts(profit3)
profit<-NULL
for (i in 1:length(out)) {
p<-xts(out[[i]]$sig.perf*abs(out[[i]]$actual),as.Date(out[[i]]$date))
append(profit,p)
}
profit.index<-makeIndex(profit,inv=FALSE,ret=TRUE)
plot.xts(profit.index)
p<-xts(out[[1]]$sig.perf*abs(out[[1]]$actual),as.Date(out[[1]]$date))
head(p)
append(profit,p)
profit<-NULL
for (i in 1:length(out)) {
p<-xts(out[[i]]$sig.perf*abs(out[[i]]$actual),as.Date(out[[i]]$date))
profit<-append(profit,p)
}
profit.index<-makeIndex(profit,inv=FALSE,ret=TRUE)
plot.xts(profit.index)
profit<-NULL
for (i in 1:length(out)) {
p<-xts(out[[i]]$sig.perf*abs(out[[i]]$actual),as.Date(out[[i]]$date))
profit<-append(profit,p)
}
profit.index<-makeIndex(profit,inv=FALSE,ret=TRUE)
plot.xts(profit.index, main="Out of Sample Performance: Cumulative")
# or...we can look at each year's performance.
par(mfrow=c(2,2))
profit1<-xts(out[[1]]$sig.perf*abs(out[[1]]$actual),as.Date(out[[1]]$date))
profit1<-makeIndex(profit1,inv=FALSE,ret=TRUE)
plot.xts(profit1,main="Out of Sample Performance: 2007")
profit2<-xts(out[[2]]$sig.perf*abs(out[[2]]$actual),as.Date(out[[2]]$date))
profit2<-makeIndex(profit2,inv=FALSE,ret=TRUE)
plot.xts(profit2,main="Out of Sample Performance: 2008")
profit3<-xts(out[[3]]$sig.perf*abs(out[[3]]$actual),as.Date(out[[3]]$date))
profit3<-makeIndex(profit3,inv=FALSE,ret=TRUE)
plot.xts(profit3,main="Out of Sample Performance: 2009")
summary(profit)
par(mfrow=c(1,1))
plot(density(profit))
sample.years<-c("2007","2008","2009","2010","2012")
sample.model<-train.model # Currently 2011 trained...
out<-runSamples(sample.years,sample.model)
sample.years<-c("2007","2008","2009","2010")
out<-runSamples(sample.years,sample.model)
profit<-NULL
for (i in 1:length(out)) {
p<-xts(out[[i]]$sig.perf*abs(out[[i]]$actual),as.Date(out[[i]]$date))
profit<-append(profit,p)
}
profit.index<-makeIndex(profit,inv=FALSE,ret=TRUE)
plot.xts(profit.index, main="Out of Sample Performance: Cumulative")
# or...we can look at each year's performance.
par(mfrow=c(2,2))
profit1<-xts(out[[1]]$sig.perf*abs(out[[1]]$actual),as.Date(out[[1]]$date))
profit1<-makeIndex(profit1,inv=FALSE,ret=TRUE)
plot.xts(profit1,main="Out of Sample Performance: 2007")
profit2<-xts(out[[2]]$sig.perf*abs(out[[2]]$actual),as.Date(out[[2]]$date))
profit2<-makeIndex(profit2,inv=FALSE,ret=TRUE)
plot.xts(profit2,main="Out of Sample Performance: 2008")
profit3<-xts(out[[3]]$sig.perf*abs(out[[3]]$actual),as.Date(out[[3]]$date))
profit3<-makeIndex(profit3,inv=FALSE,ret=TRUE)
plot.xts(profit3,main="Out of Sample Performance: 2009")
profit4<-xts(out[[4]]$sig.perf*abs(out[[4]]$actual),as.Date(out[[4]]$date))
profit4<-makeIndex(profit4,inv=FALSE,ret=TRUE)
plot.xts(profit3,main="Out of Sample Performance: 2010")
par(mfrow=c(1,1))
