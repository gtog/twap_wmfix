for (i in 1:length(out)) {
p<-xts(out[[i]]$sig.perf*abs(out[[i]]$actual),as.Date(out[[i]]$date))
profit<-append(profit,p)
}
profit.index<-makeIndex(profit,inv=FALSE,ret=TRUE)
plot.xts(profit.index, main="Out of Sample Performance: Cumulative")
# or...we can look at each year's performance.
par(mfrow=c(2,2))
for (i in 1:length(out)){
p<-xts(out[[i]]$sig.perf*abs(out[[i]]$actual),as.Date(out[[i]]$date))
p<-makeIndex(p,inv=FALSE,ret=TRUE)
y<-substr(index(p,0)[1],0,4)
plot.xts(p,main=paste("Out of Sample Performance: ",y))
rm(p)
}
err<-list()
for (i in 1:length(out)){
err[[i]]<-subset(-1*(abs(out[[i]]$actual)+abs(out[[i]]$fitted)),subset=c(out[[i]]$sig.perf<0))
}
plot(density(err[[1]]),type="l",col="dark grey",ylim=c(0,800),xlim=c(-.0060,.0010))
for (i in 2:length(out)) {
lines(density(err[[i]],type="l",col="dark grey"))
}
merr<-sapply(err,MARGIN=2,FUN=mean)
plot(density(merr),col="red")
par(mfrow=c(1,1))
profit<-NULL
for (i in 1:length(out)) {
p<-xts(out[[i]]$sig.perf*abs(out[[i]]$actual),as.Date(out[[i]]$date))
profit<-append(profit,p)
}
profit.index<-makeIndex(profit,inv=FALSE,ret=TRUE)
plot.xts(profit.index, main="Out of Sample Performance: Cumulative")
# or...we can look at each year's performance.
par(mfrow=c(2,2))
for (i in 1:length(out)){
p<-xts(out[[i]]$sig.perf*abs(out[[i]]$actual),as.Date(out[[i]]$date))
p<-makeIndex(p,inv=FALSE,ret=TRUE)
y<-substr(index(p,0)[1],0,4)
plot.xts(p,main=paste("Out of Sample Performance: ",y))
rm(p)
}
# Looking at the error distributions...
err<-list()
for (i in 1:length(out)){
err[[i]]<-subset(-1*(abs(out[[i]]$actual)+abs(out[[i]]$fitted)),subset=c(out[[i]]$sig.perf<0))
}
plot(density(err[[1]]),type="l",col="dark grey",ylim=c(0,800),xlim=c(-.0060,.0010),
main="Error Densities for each sample year: 2008:2012")
for (i in 2:length(out)) {
lines(density(err[[i]],type="l",col="dark grey"))
}
merr<-sapply(err,MARGIN=2,FUN=mean)
plot(density(merr),col="red",main="Density of Mean Error")
profit<-NULL
for (i in 1:length(out)) {
p<-xts(out[[i]]$sig.perf*abs(out[[i]]$actual),as.Date(out[[i]]$date))
profit<-append(profit,p)
}
profit.index<-makeIndex(profit,inv=FALSE,ret=TRUE)
plot.xts(profit.index, main="Out of Sample Performance: Cumulative")
# or...we can look at each year's performance.
par(mfrow=c(2,2))
for (i in 1:length(out)){
p<-xts(out[[i]]$sig.perf*abs(out[[i]]$actual),as.Date(out[[i]]$date))
p<-makeIndex(p,inv=FALSE,ret=TRUE)
y<-substr(index(p,0)[1],0,4)
plot.xts(p,main=paste("Out of Sample Performance: ",y))
rm(p)
}
# Looking at the error distributions...
err<-list()
for (i in 1:length(out)){
err[[i]]<-subset(-1*(abs(out[[i]]$actual)+abs(out[[i]]$fitted)),subset=c(out[[i]]$sig.perf<0))
}
plot(density(err[[1]]),col="dark grey",ylim=c(0,800),xlim=c(-.0060,.0010),
main="Error Densities for each sample year: 2008:2012")
for (i in 2:length(out)) {
lines(density(err[[i]],col="dark grey"))
}
merr<-sapply(err,MARGIN=2,FUN=mean)
plot(density(merr),col="red",main="Density of Mean Error")
par(mfrow=c(1,1))
profit<-NULL
for (i in 1:length(out)) {
p<-xts(out[[i]]$sig.perf*abs(out[[i]]$actual),as.Date(out[[i]]$date))
profit<-append(profit,p)
}
profit.index<-makeIndex(profit,inv=FALSE,ret=TRUE)
plot.xts(profit.index, main="Out of Sample Performance: Cumulative")
# or...we can look at each year's performance.
par(mfrow=c(2,2))
for (i in 1:length(out)){
p<-xts(out[[i]]$sig.perf*abs(out[[i]]$actual),as.Date(out[[i]]$date))
p<-makeIndex(p,inv=FALSE,ret=TRUE)
y<-substr(index(p,0)[1],0,4)
plot.xts(p,main=paste("Out of Sample Performance: ",y))
rm(p)
}
# Looking at the error distributions...
err<-list()
for (i in 1:length(out)){
err[[i]]<-subset(-1*(abs(out[[i]]$actual)+abs(out[[i]]$fitted)),subset=c(out[[i]]$sig.perf<0))
}
plot(density(err[[1]]),col="dark grey",ylim=c(0,800),xlim=c(-.0060,.0010),
main="Error Densities for each sample year: 2008:2012")
for (i in 2:length(out)) {
lines(density(err[[i]]),col="dark grey"))
}
merr<-sapply(err,MARGIN=2,FUN=mean)
plot(density(merr),col="red",main="Density of Mean Error")
par(mfrow=c(1,1))
profit<-NULL
for (i in 1:length(out)) {
p<-xts(out[[i]]$sig.perf*abs(out[[i]]$actual),as.Date(out[[i]]$date))
profit<-append(profit,p)
}
profit.index<-makeIndex(profit,inv=FALSE,ret=TRUE)
plot.xts(profit.index, main="Out of Sample Performance: Cumulative")
# or...we can look at each year's performance.
par(mfrow=c(2,2))
for (i in 1:length(out)){
p<-xts(out[[i]]$sig.perf*abs(out[[i]]$actual),as.Date(out[[i]]$date))
p<-makeIndex(p,inv=FALSE,ret=TRUE)
y<-substr(index(p,0)[1],0,4)
plot.xts(p,main=paste("Out of Sample Performance: ",y))
rm(p)
}
# Looking at the error distributions...
err<-list()
for (i in 1:length(out)){
err[[i]]<-subset(-1*(abs(out[[i]]$actual)+abs(out[[i]]$fitted)),subset=c(out[[i]]$sig.perf<0))
}
plot(density(err[[1]]),col="dark grey",ylim=c(0,800),xlim=c(-.0060,.0010),
main="Error Densities for each sample year: 2008:2012")
for (i in 2:length(out)) {
lines(density(err[[i]]),col="dark grey")
}
merr<-sapply(err,MARGIN=2,FUN=mean)
plot(density(merr),col="red",main="Density of Mean Error")
par(mfrow=c(1,1))
runSamples<-function(years,trainedmodel){
# this function will run through a bunch of years and compare the results to whatever model is stored
# in trainedmodel. trainedmodel should be of class "lm" or "glm".
# years should be a vector of years, for example: years=c("2008","2009","2010","2012")
retlist<-list()
for (i in 1:length(years)) {
newyear<-years[i]
if (years[i]=="2012") separ=c(",") else separ=c(";")
newdata<-read.csv(paste("~/R/R Projects/data/",newyear,"/DAT_ASCII_EURUSD_M1_",newyear,".csv",sep=""), sep=separ, quote="\"")
names(newdata)<-c("time_stamp","open_bid","high_bid","low_bid","close_bid","volume")
firstnewdate<-substr(newdata$time_stamp[1],0,8)
firstnewdate<-paste(substr(firstnewdate,0,4),"-",substr(firstnewdate,5,6),"-",substr(firstnewdate,7,8),"/",sep="")
cat(firstnewdate)
newLHS<-makeLHS(newdata)
head(newLHS)
newdf<-na.omit(merge.xts(Op(newLHS),OpCl(IPC[firstnewdate]),join="left"))
names(newdf)<-c("LHS.Open","OpCl.IPC")
newdf<-merge.xts(newdf,OpCl(DOW),join="inner")
newdf<-merge.xts(newdf,OpCl(BSESN),join="inner")
newdf<-merge.xts(newdf,OpCl(GDAXI),join="inner")
newdf<-merge.xts(newdf,OpCl(SSMI),join="inner")
newdf<-merge.xts(newdf,OpCl(TA100),join="inner")
newdf<-merge.xts(newdf,na.omit(Return.calculate(DEXUSAL)),join="inner") # AUDUSD
newdf<-merge.xts(newdf,na.omit(Return.calculate(DEXINUS)),join="inner") # USDINR
newdf<-merge.xts(newdf,na.omit(Return.calculate(DEXBZUS)),join="inner") # USDBRL
newdf<-merge.xts(newdf,na.omit(Return.calculate(DEXCAUS)),join="inner") # USDCAD
newdf<-merge.xts(newdf,na.omit(Return.calculate(DEXUSEU)),join="inner") # EURUSD
newdf<-merge.xts(newdf,na.omit(Return.calculate(DEXJPUS)),join="inner") # USDJPY
newdf<-merge.xts(newdf,na.omit(Return.calculate(DEXMXUS)),join="inner") # USDMXN
newdf<-merge.xts(newdf,na.omit(Return.calculate(DEXKOUS)),join="inner") # USDKRW
head(newdf)
dts<-as.Date(index(newdf,0))
newmod<-lm(traindedmodel,data=newdf)
newactuals<-as.vector(newdf$LHS.Open)
newfitted<-as.vector(fitted(newmod))
plot(newactuals,type="l",col="dark grey",main=paste("Fit vs. Actuals in Year= ",years[i]))
lines(newfitted,col="blue")
retlist[[i]]<-as.data.frame(cbind(dts,newfitted,newactuals,sign(newfitted)*sign(newactuals)))
names(retlist[[i]])<-c("date","fitted","actual","sig.perf")
cat("Sample year complete. Starting next sample year.","\n")
}
cat("Finished all years. Returning data list and exiting.","\n")
return(retlist)
}
count(out[[1]]$sig.perf<0)
temp<-count(out[[1]]$sig.perf<0)[2,0]
temp
temp<-as.vector(count(out[[1]]$sig.perf<0))
temp
temp$freq
temp<-count(out[[1]]$sig.perf<0)$freq
temp
temp[2]
sum(temp)
runSamples<-function(years,trainedmodel){
# this function will run through a bunch of years and compare the results to whatever model is stored
# in trainedmodel. trainedmodel should be of class "lm" or "glm".
# years should be a vector of years, for example: years=c("2008","2009","2010","2012")
retlist<-list()
for (i in 1:length(years)) {
newyear<-years[i]
if (years[i]=="2012") separ=c(",") else separ=c(";")
newdata<-read.csv(paste("~/R/R Projects/data/",newyear,"/DAT_ASCII_EURUSD_M1_",newyear,".csv",sep=""), sep=separ, quote="\"")
names(newdata)<-c("time_stamp","open_bid","high_bid","low_bid","close_bid","volume")
firstnewdate<-substr(newdata$time_stamp[1],0,8)
firstnewdate<-paste(substr(firstnewdate,0,4),"-",substr(firstnewdate,5,6),"-",substr(firstnewdate,7,8),"/",sep="")
cat(firstnewdate)
newLHS<-makeLHS(newdata)
head(newLHS)
newdf<-na.omit(merge.xts(Op(newLHS),OpCl(IPC[firstnewdate]),join="left"))
names(newdf)<-c("LHS.Open","OpCl.IPC")
newdf<-merge.xts(newdf,OpCl(DOW),join="inner")
newdf<-merge.xts(newdf,OpCl(BSESN),join="inner")
newdf<-merge.xts(newdf,OpCl(GDAXI),join="inner")
newdf<-merge.xts(newdf,OpCl(SSMI),join="inner")
newdf<-merge.xts(newdf,OpCl(TA100),join="inner")
newdf<-merge.xts(newdf,na.omit(Return.calculate(DEXUSAL)),join="inner") # AUDUSD
newdf<-merge.xts(newdf,na.omit(Return.calculate(DEXINUS)),join="inner") # USDINR
newdf<-merge.xts(newdf,na.omit(Return.calculate(DEXBZUS)),join="inner") # USDBRL
newdf<-merge.xts(newdf,na.omit(Return.calculate(DEXCAUS)),join="inner") # USDCAD
newdf<-merge.xts(newdf,na.omit(Return.calculate(DEXUSEU)),join="inner") # EURUSD
newdf<-merge.xts(newdf,na.omit(Return.calculate(DEXJPUS)),join="inner") # USDJPY
newdf<-merge.xts(newdf,na.omit(Return.calculate(DEXMXUS)),join="inner") # USDMXN
newdf<-merge.xts(newdf,na.omit(Return.calculate(DEXKOUS)),join="inner") # USDKRW
head(newdf)
dts<-as.Date(index(newdf,0))
newmod<-lm(traindedmodel,data=newdf)
newactuals<-as.vector(newdf$LHS.Open)
newfitted<-as.vector(fitted(newmod))
plot(newactuals,type="l",col="dark grey",main=paste("Fit vs. Actuals in Year= ",years[i]))
lines(newfitted,col="blue")
retlist[[i]]<-as.data.frame(cbind(dts,newfitted,newactuals,sign(newfitted)*sign(newactuals)))
names(retlist[[i]])<-c("date","fitted","actual","sig.perf")
err.rate<-count(retlist[[i]]$sig.perf<0)$freq[2]/length(sig.perf)
cat("Sample year complete. Error rate was: ",round(err.rate,4),"Starting next sample year.","\n")
}
cat("Finished all years. Returning data list and exiting.","\n")
return(retlist)
}
out<-runSamples(sample.years,sample.model)
runSamples<-function(years,trainedmodel){
# this function will run through a bunch of years and compare the results to whatever model is stored
# in trainedmodel. trainedmodel should be of class "lm" or "glm".
# years should be a vector of years, for example: years=c("2008","2009","2010","2012")
retlist<-list()
for (i in 1:length(years)) {
newyear<-years[i]
if (years[i]=="2012") separ=c(",") else separ=c(";")
newdata<-read.csv(paste("~/R/R Projects/data/",newyear,"/DAT_ASCII_EURUSD_M1_",newyear,".csv",sep=""), sep=separ, quote="\"")
names(newdata)<-c("time_stamp","open_bid","high_bid","low_bid","close_bid","volume")
firstnewdate<-substr(newdata$time_stamp[1],0,8)
firstnewdate<-paste(substr(firstnewdate,0,4),"-",substr(firstnewdate,5,6),"-",substr(firstnewdate,7,8),"/",sep="")
cat(firstnewdate)
newLHS<-makeLHS(newdata)
head(newLHS)
newdf<-na.omit(merge.xts(Op(newLHS),OpCl(IPC[firstnewdate]),join="left"))
names(newdf)<-c("LHS.Open","OpCl.IPC")
newdf<-merge.xts(newdf,OpCl(DOW),join="inner")
newdf<-merge.xts(newdf,OpCl(BSESN),join="inner")
newdf<-merge.xts(newdf,OpCl(GDAXI),join="inner")
newdf<-merge.xts(newdf,OpCl(SSMI),join="inner")
newdf<-merge.xts(newdf,OpCl(TA100),join="inner")
newdf<-merge.xts(newdf,na.omit(Return.calculate(DEXUSAL)),join="inner") # AUDUSD
newdf<-merge.xts(newdf,na.omit(Return.calculate(DEXINUS)),join="inner") # USDINR
newdf<-merge.xts(newdf,na.omit(Return.calculate(DEXBZUS)),join="inner") # USDBRL
newdf<-merge.xts(newdf,na.omit(Return.calculate(DEXCAUS)),join="inner") # USDCAD
newdf<-merge.xts(newdf,na.omit(Return.calculate(DEXUSEU)),join="inner") # EURUSD
newdf<-merge.xts(newdf,na.omit(Return.calculate(DEXJPUS)),join="inner") # USDJPY
newdf<-merge.xts(newdf,na.omit(Return.calculate(DEXMXUS)),join="inner") # USDMXN
newdf<-merge.xts(newdf,na.omit(Return.calculate(DEXKOUS)),join="inner") # USDKRW
head(newdf)
dts<-as.Date(index(newdf,0))
newmod<-lm(traindedmodel,data=newdf)
newactuals<-as.vector(newdf$LHS.Open)
newfitted<-as.vector(fitted(newmod))
plot(newactuals,type="l",col="dark grey",main=paste("Fit vs. Actuals in Year= ",years[i]))
lines(newfitted,col="blue")
retlist[[i]]<-as.data.frame(cbind(dts,newfitted,newactuals,sign(newfitted)*sign(newactuals)))
names(retlist[[i]])<-c("date","fitted","actual","sig.perf")
err.rate<-count(retlist[[i]]$sig.perf<0)$freq[2]/length(retlist[[i]]$sig.perf)
cat("Sample year complete. Error rate was: ",round(err.rate,4),"Starting next sample year.","\n")
}
cat("Finished all years. Returning data list and exiting.","\n")
return(retlist)
}
out<-runSamples(sample.years,sample.model)
head(new.fitted)
tail(new.df)
tail(fitted(new.model))
summary(new.model)
summary(train.model)
head(DEXUSEU)
head(DEXUSAL)
head(DEXJPUS)
head(DEXMXUS)
head(DEXUSEU)
training.year=c("2005")
train.data<-read.table(paste("~/R/R Projects/data/",training.year,"/DAT_ASCII_EURUSD_M1_",training.year,".csv",sep=""), sep=";", quote="\"")
names(train.data)<-data.names
first.train.date<-c("2005-01-02/")
head(train.data)
train.LHS<-makeLHS(train.data)
train.df<-na.omit(merge.xts(Op(train.LHS),na.omit(Return.calculate(DEXUSEU)),join="left")) # EURUSD
names(train.df)<-c("LHS.Open","ret.eurusd")
train.df<-merge.xts(train.df,na.omit(Return.calculate(DEXUSAL)),join="inner") # AUDUSD
#train.df<-merge.xts(train.df,na.omit(Return.calculate(DEXINUS)),join="inner") # USDINR
#train.df<-merge.xts(train.df,na.omit(Return.calculate(DEXBZUS)),join="inner") # USDBRL
#train.df<-merge.xts(train.df,na.omit(Return.calculate(DEXCAUS)),join="inner") # USDCAD
#train.df<-merge.xts(train.df,na.omit(Return.calculate(DEXUSEU)),join="inner") # EURUSD
train.df<-merge.xts(train.df,na.omit(Return.calculate(DEXJPUS)),join="inner") # USDJPY
train.df<-merge.xts(train.df,na.omit(Return.calculate(DEXMXUS)),join="inner") # USDMXN
#train.df<-merge.xts(train.df,na.omit(Return.calculate(DEXKOUS)),join="inner") # USDKRW
# NEW: Let's add some lagged variables of the currency pair were modeling. For example, let's
# add the first 3 daily lags to the model and see what happens out of sample...
ccy.lag1<-na.omit(lag(Return.calculate(DEXUSEU),1))
ccy.lag3<-na.omit(lag(Return.calculate(DEXUSEU),3))
train.df<-merge.xts(train.df,ccy.lag1,join="inner") # ccy pair returns lagged 1 day
train.df<-merge.xts(train.df,ccy.lag3,join="inner") # lagged 3 days
train.df<-as.data.frame(train.df)
# Let's have a look and make sure that looks good...
head(train.df)
train.df<-na.omit(merge.xts(Op(train.LHS),na.omit(Return.calculate(DEXUSEU)),join="left")) # EURUSD
names(train.df)<-c("LHS.Open","DEXUSEU")
train.df<-merge.xts(train.df,na.omit(Return.calculate(DEXUSAL)),join="inner") # AUDUSD
#train.df<-merge.xts(train.df,na.omit(Return.calculate(DEXINUS)),join="inner") # USDINR
#train.df<-merge.xts(train.df,na.omit(Return.calculate(DEXBZUS)),join="inner") # USDBRL
#train.df<-merge.xts(train.df,na.omit(Return.calculate(DEXCAUS)),join="inner") # USDCAD
#train.df<-merge.xts(train.df,na.omit(Return.calculate(DEXUSEU)),join="inner") # EURUSD
train.df<-merge.xts(train.df,na.omit(Return.calculate(DEXJPUS)),join="inner") # USDJPY
train.df<-merge.xts(train.df,na.omit(Return.calculate(DEXMXUS)),join="inner") # USDMXN
#train.df<-merge.xts(train.df,na.omit(Return.calculate(DEXKOUS)),join="inner") # USDKRW
# NEW: Let's add some lagged variables of the currency pair were modeling. For example, let's
# add the first 3 daily lags to the model and see what happens out of sample...
ccy.lag1<-na.omit(lag(Return.calculate(DEXUSEU),1))
names(ccy.lag1)=c("DEXUSEU.1")
ccy.lag3<-na.omit(lag(Return.calculate(DEXUSEU),3))
names(ccy.lag1)=c("DEXUSEU.3")
train.df<-merge.xts(train.df,ccy.lag1,join="inner") # ccy pair returns lagged 1 day
train.df<-merge.xts(train.df,ccy.lag3,join="inner") # lagged 3 days
train.df<-as.data.frame(train.df)
# Let's have a look and make sure that looks good...
head(train.df)
tail(train.df)
head(train.df)
train.fit<-glmulti(LHS.Open~.,
data=train.df,
intercept=TRUE,
level=2,
marginality=FALSE,
minsize=-1, # -1 = no constraint
maxsize=-1,
minK=-1,
maxK=-1,
crit=aic,
fitfunc=lm,
method="g", # "h"=exhaustive, "g"=genetic algorithm, "l"=very fast, exhaustive, branch and bound, "d"=simple summary
plotty=FALSE, #plot progression of IC profile while running...
report=TRUE,
confsetsize=1000)
train.form<-as.formula(summary(train.fit)$bestmodel)
train.model<-lm(train.form,data=train.df)
# Let's have a look a summary of our derived model:
summary(train.model)
train.actuals<-as.vector(train.df$LHS.Open)
train.fitted<-as.vector(fitted(train.model))
plot(train.actuals,type="l",col="dark grey")
lines(train.fitted,col="blue")
plot(residuals(train.model),type="l",col="red")
train.signal.perf<-sign(train.fitted)*sign(train.actuals)
plot(density(train.signal.perf),type="l",col="red")
count(train.signal.perf<0)
96/(151+96)
sample.years<-c("2006","2007","2008","2009","2010","2011","2012")
sample.model<-train.model # Currently 2007 trained...
runSamples<-function(years,trainedmodel){
# this function will run through a bunch of years and compare the results to whatever model is stored
# in trainedmodel. trainedmodel should be of class "lm" or "glm".
# years should be a vector of years, for example: years=c("2008","2009","2010","2012")
retlist<-list()
for (i in 1:length(years)) {
newyear<-years[i]
if (years[i]=="2012") separ=c(",") else separ=c(";")
newdata<-read.csv(paste("~/R/R Projects/data/",newyear,"/DAT_ASCII_EURUSD_M1_",newyear,".csv",sep=""), sep=separ, quote="\"")
names(newdata)<-c("time_stamp","open_bid","high_bid","low_bid","close_bid","volume")
firstnewdate<-substr(newdata$time_stamp[1],0,8)
firstnewdate<-paste(substr(firstnewdate,0,4),"-",substr(firstnewdate,5,6),"-",substr(firstnewdate,7,8),"/",sep="")
cat(firstnewdate)
newLHS<-makeLHS(newdata)
head(newLHS)
newdf<-na.omit(merge.xts(Op(newLHS),OpCl(IPC[firstnewdate]),join="left"))
names(newdf)<-c("LHS.Open","OpCl.IPC")
newdf<-merge.xts(newdf,OpCl(DOW),join="inner")
newdf<-merge.xts(newdf,OpCl(BSESN),join="inner")
newdf<-merge.xts(newdf,OpCl(GDAXI),join="inner")
newdf<-merge.xts(newdf,OpCl(SSMI),join="inner")
newdf<-merge.xts(newdf,OpCl(TA100),join="inner")
newdf<-merge.xts(newdf,na.omit(Return.calculate(DEXUSAL)),join="inner") # AUDUSD
newdf<-merge.xts(newdf,na.omit(Return.calculate(DEXINUS)),join="inner") # USDINR
newdf<-merge.xts(newdf,na.omit(Return.calculate(DEXBZUS)),join="inner") # USDBRL
newdf<-merge.xts(newdf,na.omit(Return.calculate(DEXCAUS)),join="inner") # USDCAD
newdf<-merge.xts(newdf,na.omit(Return.calculate(DEXUSEU)),join="inner") # EURUSD
newdf<-merge.xts(newdf,na.omit(Return.calculate(DEXJPUS)),join="inner") # USDJPY
newdf<-merge.xts(newdf,na.omit(Return.calculate(DEXMXUS)),join="inner") # USDMXN
newdf<-merge.xts(newdf,na.omit(Return.calculate(DEXKOUS)),join="inner") # USDKRW
head(newdf)
dts<-as.Date(index(newdf,0))
newmod<-lm(traindedmodel,data=newdf)
newactuals<-as.vector(newdf$LHS.Open)
newfitted<-as.vector(fitted(newmod))
plot(newactuals,type="l",col="dark grey",main=paste("Fit vs. Actuals in Year= ",years[i]))
lines(newfitted,col="blue")
retlist[[i]]<-as.data.frame(cbind(dts,newfitted,newactuals,sign(newfitted)*sign(newactuals)))
names(retlist[[i]])<-c("date","fitted","actual","sig.perf")
err.rate<-count(retlist[[i]]$sig.perf<0)$freq[2]/length(retlist[[i]]$sig.perf)
cat("Sample year complete. Error rate was: ",round(err.rate,4),"Starting next sample year.","\n")
}
cat("Finished all years. Returning data list and exiting.","\n")
return(retlist)
}
out<-runSamples(sample.years,sample.model)
runSamples<-function(years,trainedmodel){
# this function will run through a bunch of years and compare the results to whatever model is stored
# in trainedmodel. trainedmodel should be of class "lm" or "glm".
# years should be a vector of years, for example: years=c("2008","2009","2010","2012")
retlist<-list()
for (i in 1:length(years)) {
newyear<-years[i]
if (years[i]=="2012" || years[i]=="2006") separ=c(",") else separ=c(";")
newdata<-read.csv(paste("~/R/R Projects/data/",newyear,"/DAT_ASCII_EURUSD_M1_",newyear,".csv",sep=""), sep=separ, quote="\"")
names(newdata)<-c("time_stamp","open_bid","high_bid","low_bid","close_bid","volume")
firstnewdate<-substr(newdata$time_stamp[1],0,8)
firstnewdate<-paste(substr(firstnewdate,0,4),"-",substr(firstnewdate,5,6),"-",substr(firstnewdate,7,8),"/",sep="")
cat(firstnewdate)
newLHS<-makeLHS(newdata)
head(newLHS)
newdf<-na.omit(merge.xts(Op(newLHS),OpCl(IPC[firstnewdate]),join="left"))
names(newdf)<-c("LHS.Open","OpCl.IPC")
newdf<-merge.xts(newdf,OpCl(DOW),join="inner")
newdf<-merge.xts(newdf,OpCl(BSESN),join="inner")
newdf<-merge.xts(newdf,OpCl(GDAXI),join="inner")
newdf<-merge.xts(newdf,OpCl(SSMI),join="inner")
newdf<-merge.xts(newdf,OpCl(TA100),join="inner")
newdf<-merge.xts(newdf,na.omit(Return.calculate(DEXUSAL)),join="inner") # AUDUSD
newdf<-merge.xts(newdf,na.omit(Return.calculate(DEXINUS)),join="inner") # USDINR
newdf<-merge.xts(newdf,na.omit(Return.calculate(DEXBZUS)),join="inner") # USDBRL
newdf<-merge.xts(newdf,na.omit(Return.calculate(DEXCAUS)),join="inner") # USDCAD
newdf<-merge.xts(newdf,na.omit(Return.calculate(DEXUSEU)),join="inner") # EURUSD
newdf<-merge.xts(newdf,na.omit(Return.calculate(DEXJPUS)),join="inner") # USDJPY
newdf<-merge.xts(newdf,na.omit(Return.calculate(DEXMXUS)),join="inner") # USDMXN
newdf<-merge.xts(newdf,na.omit(Return.calculate(DEXKOUS)),join="inner") # USDKRW
head(newdf)
dts<-as.Date(index(newdf,0))
newmod<-lm(traindedmodel,data=newdf)
newactuals<-as.vector(newdf$LHS.Open)
newfitted<-as.vector(fitted(newmod))
plot(newactuals,type="l",col="dark grey",main=paste("Fit vs. Actuals in Year= ",years[i]))
lines(newfitted,col="blue")
retlist[[i]]<-as.data.frame(cbind(dts,newfitted,newactuals,sign(newfitted)*sign(newactuals)))
names(retlist[[i]])<-c("date","fitted","actual","sig.perf")
err.rate<-count(retlist[[i]]$sig.perf<0)$freq[2]/length(retlist[[i]]$sig.perf)
cat("Sample year complete. Error rate was: ",round(err.rate,4),"Starting next sample year.","\n")
}
cat("Finished all years. Returning data list and exiting.","\n")
return(retlist)
}
out<-runSamples(sample.years,sample.model)
sample.years<-c("2007","2008","2009","2010","2011","2012")
out<-runSamples(sample.years,sample.model)
profit<-NULL
for (i in 1:length(out)) {
p<-xts(out[[i]]$sig.perf*abs(out[[i]]$actual),as.Date(out[[i]]$date))
profit<-append(profit,p)
}
profit.index<-makeIndex(profit,inv=FALSE,ret=TRUE)
plot.xts(profit.index, main="Out of Sample Performance: Cumulative")
par(mfrow=c(2,2))
for (i in 1:length(out)){
p<-xts(out[[i]]$sig.perf*abs(out[[i]]$actual),as.Date(out[[i]]$date))
p<-makeIndex(p,inv=FALSE,ret=TRUE)
y<-substr(index(p,0)[1],0,4)
plot.xts(p,main=paste("Out of Sample Performance: ",y))
rm(p)
}
err<-list()
for (i in 1:length(out)){
err[[i]]<-subset(-1*(abs(out[[i]]$actual)+abs(out[[i]]$fitted)),subset=c(out[[i]]$sig.perf<0))
}
plot(density(err[[1]]),col="dark grey",ylim=c(0,800),xlim=c(-.0060,.0010),
main="Error Densities for each sample year: 2008:2012")
for (i in 2:length(out)) {
lines(density(err[[i]]),col="dark grey")
}
merr<-sapply(err,MARGIN=2,FUN=mean)
plot(density(merr),col="red",main="Density of Mean Error")
par(mfrow=c(1,1))
err<-list()
for (i in 1:length(out)){
err[[i]]<-subset(-1*abs(out[[i]]$actual),subset=c(out[[i]]$sig.perf<0))
}
plot(density(err[[1]]),col="dark grey",ylim=c(0,800),xlim=c(-.0060,.0010),
main="Error Densities for each sample year: 2008:2012")
for (i in 2:length(out)) {
lines(density(err[[i]]),col="dark grey")
}
merr<-sapply(err,MARGIN=2,FUN=mean)
plot(density(merr),col="red",main="Density of Mean Error")
summary(train.model)
temp<-acf(train.model)
temp<-acf(residuals(train.model))
temp<-acf(residuals(train.model),ci=.95)
plot(train.model)
