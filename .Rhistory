p<-xts(out[[i]]$sig.perf*abs(out[[i]]$actual)-bidoffer,as.Date(out[[i]]$date))
p<-makeIndex(p,inv=FALSE,ret=TRUE)
y<-substr(index(p,0)[1],0,4)
plot.xts(p,main=paste("Out of Sample Performance: ",y))
rm(p)
}
err<-list()
for (i in 1:length(out)){
err[[i]]<-subset(-1*abs(out[[i]]$actual-bidoffer),subset=c(out[[i]]$sig.perf<0))
}
plot(density(err[[1]]),col="dark grey",ylim=c(0,1100),xlim=c(-.0060,.0010),
main="Error Densities for each sample year: 2008:2012")
for (i in 2:length(out)) {
lines(density(err[[i]]),col="dark grey")
}
merr<-sapply(err,MARGIN=2,FUN=mean)
plot(density(merr),col="red",main="Density of Mean Error")
par(mfrow=c(1,1))
train.fit<-glmulti(LHS.Open~.,
data=train.df,
intercept=TRUE,
level=2,
marginality=FALSE,
minsize=-1, # -1 = no constraint
maxsize=-1,
minK=-1,
maxK=-1,
crit=aic,
fitfunc=lm,
method="g", # "h"=exhaustive, "g"=genetic algorithm, "l"=very fast, exhaustive, branch and bound, "d"=simple summary
plotty=FALSE, #plot progression of IC profile while running...
report=TRUE,
confsetsize=1000)
train.form<-as.formula(summary(train.fit)$bestmodel)
train.model<-lm(train.form,data=train.df)
# Let's have a look a summary of our derived model:
summary(train.model)
train.actuals<-as.vector(train.df$LHS.Open)
train.fitted<-as.vector(fitted(train.model))
plot(train.actuals,type="l",col="dark grey")
lines(train.fitted,col="blue")
abline(h=c(0),col="black")
require(glmulti)
require(leaps)
require(rJava)
require(MASS)
require(fUnitRoots)
require(tseries)
suppressWarnings(library(zoo))
suppressWarnings(library(xts))
suppressWarnings(library(quantmod))
suppressWarnings(library(PerformanceAnalytics))
suppressWarnings(library(ggplot2))
suppressWarnings(library(plyr))
suppressWarnings(library(knitr))
suppressWarnings(library(chron))
suppressWarnings(library(glmulti))
suppressWarnings(library(Quandl))
require(glmulti)
require(leaps)
require(rJava)
require(MASS)
require(fUnitRoots)
require(tseries)
suppressWarnings(library(zoo))
suppressWarnings(library(xts))
suppressWarnings(library(quantmod))
suppressWarnings(library(PerformanceAnalytics))
suppressWarnings(library(ggplot2))
suppressWarnings(library(plyr))
suppressWarnings(library(knitr))
suppressWarnings(library(chron))
suppressWarnings(library(glmulti))
suppressWarnings(library(Quandl))
train.form<-as.formula(summary(train.fit)$bestmodel)
train.model<-lm(train.form,data=train.df)
# Let's have a look a summary of our derived model:
summary(train.model)
train.actuals<-as.vector(train.df$LHS.Open)
train.fitted<-as.vector(fitted(train.model))
plot(train.actuals,type="l",col="dark grey")
lines(train.fitted,col="blue")
abline(h=c(0),col="black")
??validate
library("boot", lib.loc="C:/Program Files/R/R-3.0.0/library")
library(Design())
library(Design)
require(Design)
install.packages("rms")
require(rms)
?ols
model1<-ols(train.model,
data=train.df,
x=TRUE,
y=TRUE)
train.model
sample.model
head(train.df)
model1<-ols(formula=train.model,
data=train.df,
x=TRUE,
y=TRUE,
linear.predictors=TRUE,
)
model1<-ols(formula=train.form,
data=train.df,
x=TRUE,
y=TRUE,
linear.predictors=TRUE,
)
train.form
ols
head(train.data)
head(train.df)
model1<-ols(formula=train.form,
data=train.df,
x=TRUE,
y=TRUE,
linear.predictors=TRUE,
)
model1<-rms::ols(formula=train.form,
data=train.df,
x=TRUE,
y=TRUE,
linear.predictors=TRUE,
)
model1<-ols(formula=train.form,
data=train.df,
weights=NULL,
subset=NULL,
na.action=na.delete,
model=FALSE,
x=TRUE,
y=TRUE,
linear.predictors=TRUE,
)
lrm
?lrm
?lm.fit
model1<-ols(formula=train.form,
data=train.df,
weights=NULL,
subset=NULL,
na.action=na.delete,
model=FALSE,
method="qr",
x=TRUE,
y=TRUE,
se.fit=FALSE,
linear.predictors=TRUE,
)
model1<-ols(formula=train.form,
data=train.df
)
model1<ols(train.form, data=train.df, na.action=na.delete,
method="qr", model=FALSE,
x=TRUE, y=TRUE, se.fit=FALSE, linear.predictors=TRUE)
model1<-ols(train.form, data=train.df, na.action=na.delete,
method="qr", model=FALSE,
x=TRUE, y=TRUE, se.fit=FALSE, linear.predictors=TRUE)
model1<-ols(train.form, data=train.df, na.action=na.delete,
method="qr", model=FALSE,
x=TRUE, y=TRUE, se.fit=FALSE, linear.predictors=TRUE,penalty=0)
d<-datadist(train.df)
d
model1<-ols(formula=train.form,
data=train.df,
x=TRUE,
y=TRUE,
se.fit=FALSE,
linear.predictors=TRUE)
train.form
testform<-as.formula(LHS.Open~IPC+DEXMXUS+DEXKOUS)
test.form
testform
model1<-ols(formula=testform,
data=train.df,
x=TRUE,
y=TRUE,
se.fit=FALSE,
linear.predictors=TRUE)
testform<-as.formula(LHS.Open~IPC + DEXMXUS + DEXKOUS + BSESN:IPC + GDAXI:DOW +
SSMI:GDAXI + TA100:DOW + TA100:GDAXI + DSWP2:IPC + DEXINUS:IPC +
DEXINUS:DOW + DEXINUS:SSMI + DEXINUS:DSWP2 + DEXBZUS:DOW +
DEXBZUS:BSESN + DEXBZUS:DEXUSAL + DEXCAUS:DOW + DEXCAUS:SSMI +
DEXCAUS:TA100 + DEXCAUS:DSWP2 + DEXCAUS:DEXBZUS + DEXUSEU:DOW +
DEXUSEU:DSWP2 + DEXJPUS:DOW + DEXJPUS:BSESN + DEXJPUS:DEXUSAL +
DEXJPUS:DEXINUS + DEXMXUS:DOW + DEXMXUS:GDAXI + DEXMXUS:TA100 +
DEXMXUS:DSWP2 + DEXMXUS:DEXINUS + DEXMXUS:DEXCAUS + DEXMXUS:DEXUSEU +
DEXKOUS:SSMI + DEXKOUS:TA100 + DEXKOUS:DEXUSAL + DEXKOUS:DEXINUS +
DEXKOUS:DEXUSEU)
model1<-ols(formula=testform,
data=train.df,
x=TRUE,
y=TRUE,
se.fit=FALSE,
linear.predictors=TRUE)
testform<-as.formula(LHS.Open~IPC + DEXMXUS + DEXKOUS + BSESN*IPC + GDAXI*DOW +
SSMI*GDAXI + TA100*DOW + TA100*GDAXI + DSWP2*IPC + DEXINUS*IPC +
DEXINUS*DOW + DEXINUS*SSMI + DEXINUS*DSWP2 + DEXBZUS*DOW +
DEXBZUS*BSESN + DEXBZUS*DEXUSAL + DEXCAUS*DOW + DEXCAUS*SSMI +
DEXCAUS*TA100 + DEXCAUS*DSWP2 + DEXCAUS*DEXBZUS + DEXUSEU*DOW +
DEXUSEU*DSWP2 + DEXJPUS*DOW + DEXJPUS*BSESN + DEXJPUS*DEXUSAL +
DEXJPUS*DEXINUS + DEXMXUS*DOW + DEXMXUS*GDAXI + DEXMXUS*TA100 +
DEXMXUS*DSWP2 + DEXMXUS*DEXINUS + DEXMXUS*DEXCAUS + DEXMXUS*DEXUSEU +
DEXKOUS*SSMI + DEXKOUS*TA100 + DEXKOUS*DEXUSAL + DEXKOUS*DEXINUS +
DEXKOUS*DEXUSEU)
model1<-ols(formula=testform,
data=train.df,
x=TRUE,
y=TRUE,
se.fit=FALSE,
linear.predictors=TRUE)
testform<-as.formula(LHS.Open~1+IPC + DEXMXUS + DEXKOUS + BSESN*IPC + GDAXI*DOW +
SSMI*GDAXI + TA100*DOW + TA100*GDAXI + DSWP2*IPC + DEXINUS*IPC +
DEXINUS*DOW + DEXINUS*SSMI + DEXINUS*DSWP2 + DEXBZUS*DOW +
DEXBZUS*BSESN + DEXBZUS*DEXUSAL + DEXCAUS*DOW + DEXCAUS*SSMI +
DEXCAUS*TA100 + DEXCAUS*DSWP2 + DEXCAUS*DEXBZUS + DEXUSEU*DOW +
DEXUSEU*DSWP2 + DEXJPUS*DOW + DEXJPUS*BSESN + DEXJPUS*DEXUSAL +
DEXJPUS*DEXINUS + DEXMXUS*DOW + DEXMXUS*GDAXI + DEXMXUS*TA100 +
DEXMXUS*DSWP2 + DEXMXUS*DEXINUS + DEXMXUS*DEXCAUS + DEXMXUS*DEXUSEU +
DEXKOUS*SSMI + DEXKOUS*TA100 + DEXKOUS*DEXUSAL + DEXKOUS*DEXINUS +
DEXKOUS*DEXUSEU)
model1<-ols(formula=testform,
data=train.df,
x=TRUE,
y=TRUE,
se.fit=FALSE,
linear.predictors=TRUE)
rm(testform)
modelform<-as.formula(LHS.Open~1+IPC + DEXMXUS + DEXKOUS + BSESN*IPC + GDAXI*DOW +
SSMI*GDAXI + TA100*DOW + TA100*GDAXI + DSWP2*IPC + DEXINUS*IPC +
DEXINUS*DOW + DEXINUS*SSMI + DEXINUS*DSWP2 + DEXBZUS*DOW +
DEXBZUS*BSESN + DEXBZUS*DEXUSAL + DEXCAUS*DOW + DEXCAUS*SSMI +
DEXCAUS*TA100 + DEXCAUS*DSWP2 + DEXCAUS*DEXBZUS + DEXUSEU*DOW +
DEXUSEU*DSWP2 + DEXJPUS*DOW + DEXJPUS*BSESN + DEXJPUS*DEXUSAL +
DEXJPUS*DEXINUS + DEXMXUS*DOW + DEXMXUS*GDAXI + DEXMXUS*TA100 +
DEXMXUS*DSWP2 + DEXMXUS*DEXINUS + DEXMXUS*DEXCAUS + DEXMXUS*DEXUSEU +
DEXKOUS*SSMI + DEXKOUS*TA100 + DEXKOUS*DEXUSAL + DEXKOUS*DEXINUS +
DEXKOUS*DEXUSEU)
model1<-ols(formula=modelform,
data=train.df,
x=TRUE,
y=TRUE,
se.fit=FALSE,
linear.predictors=TRUE)
model1
?as.formula
names(train.df)
modelform<-as.formula(LHS.Open~.)
model1<-ols(formula=modelform,
data=train.df,
x=TRUE,
y=TRUE,
se.fit=FALSE,
linear.predictors=TRUE)
model1
?as.formula
modelform<-as.formula("LHS.Open~.")
model1<-ols(formula=modelform,
data=train.df,
x=TRUE,
y=TRUE,
se.fit=FALSE,
linear.predictors=TRUE)
modelform<-as.formula("LHS.Open~.",data=train.df)
modelform<-as.formula(LHS.Open~)
head(train.df)
modelform<-as.formula(LHS.Open~IPC+DOW+BSESN+GDAXI+SSMI+TA100+DSWP2+DEXUSAL+DEXINUS+DEXBZUS+DEXCAUS+DEXUSEU+DEXJPUS)
model1<-ols(formula=modelform,
data=train.df,
x=TRUE,
y=TRUE,
se.fit=FALSE,
linear.predictors=TRUE)
model1
train.form
modelform<-as.formula(LHS.Open ~ 1 + IPC + DEXMXUS + DEXKOUS + BSESN*IPC + GDAXI*DOW +
SSMI*GDAXI + TA100*DOW + TA100*GDAXI + DSWP2*IPC + DEXINUS*IPC +
DEXINUS*DOW + DEXINUS*SSMI + DEXINUS*DSWP2 + DEXBZUS*DOW +
DEXBZUS*BSESN + DEXBZUS*DEXUSAL + DEXCAUS*DOW + DEXCAUS*SSMI +
DEXCAUS*TA100 + DEXCAUS*DSWP2 + DEXCAUS*DEXBZUS + DEXUSEU*DOW +
DEXUSEU*DSWP2 + DEXJPUS*DOW + DEXJPUS*BSESN + DEXJPUS*DEXUSAL +
DEXJPUS*DEXINUS + DEXMXUS*DOW + DEXMXUS*GDAXI + DEXMXUS*TA100 +
DEXMXUS*DSWP2 + DEXMXUS*DEXINUS + DEXMXUS*DEXCAUS + DEXMXUS*DEXUSEU +
DEXKOUS*SSMI + DEXKOUS*TA100 + DEXKOUS*DEXUSAL + DEXKOUS*DEXINUS +
DEXKOUS*DEXUSEU)
model1<-ols(formula=modelform,
data=train.df,
x=TRUE,
y=TRUE,
se.fit=FALSE,
linear.predictors=TRUE)
model1
?validate
validate(model1,method="boot",B=50,bw=FALSE,rule="aic",type="residual",sls=.05,aics=0,
force=NULL,estimates=TRUE,pr=TRUE)
validate(model1,method="boot",B=50,bw=TRUE,rule="aic",type="residual",sls=.05,aics=0,
force=NULL,estimates=TRUE,pr=TRUE)
summary(model1)
print(model1)
d<-datadist(train.df)
modelform<-as.formula(LHS.Open ~ 1 + IPC + DEXMXUS + DEXKOUS + BSESN*IPC + GDAXI*DOW +
SSMI*GDAXI + TA100*DOW + TA100*GDAXI + DSWP2*IPC + DEXINUS*IPC +
DEXINUS*DOW + DEXINUS*SSMI + DEXINUS*DSWP2 + DEXBZUS*DOW +
DEXBZUS*BSESN + DEXBZUS*DEXUSAL + DEXCAUS*DOW + DEXCAUS*SSMI +
DEXCAUS*TA100 + DEXCAUS*DSWP2 + DEXCAUS*DEXBZUS + DEXUSEU*DOW +
DEXUSEU*DSWP2 + DEXJPUS*DOW + DEXJPUS*BSESN + DEXJPUS*DEXUSAL +
DEXJPUS*DEXINUS + DEXMXUS*DOW + DEXMXUS*GDAXI + DEXMXUS*TA100 +
DEXMXUS*DSWP2 + DEXMXUS*DEXINUS + DEXMXUS*DEXCAUS + DEXMXUS*DEXUSEU +
DEXKOUS*SSMI + DEXKOUS*TA100 + DEXKOUS*DEXUSAL + DEXKOUS*DEXINUS +
DEXKOUS*DEXUSEU)
model1<-ols(formula=modelform,
data=train.df,
x=TRUE,
y=TRUE,
se.fit=FALSE,
linear.predictors=TRUE)
summary(model1)
anova(model1)
contrast(model1)
plot.anova(model1)
print.ols(model1)
require(glmulti)
require(leaps)
require(rJava)
require(MASS)
require(fUnitRoots)
require(tseries)
require(rms)
suppressWarnings(library(zoo))
suppressWarnings(library(xts))
suppressWarnings(library(quantmod))
suppressWarnings(library(PerformanceAnalytics))
suppressWarnings(library(ggplot2))
suppressWarnings(library(plyr))
suppressWarnings(library(knitr))
suppressWarnings(library(chron))
suppressWarnings(library(Quandl))
makeLHS<-function(data,binary) {
# Takes a data object and year and constructs a quantmod OHLC object which is the FIX - TWAP for that
# variable. The data should be one of the minute interval data sets in OHLC, xts format.
# If binary==TRUE, then a binary response variable is assembled such that if FIX-TWAP > 0 -> 1, else 0.
# If binary==TRUE, then the function makes the first column the binary indicator and the second
# column the potential p/l = Fixing - TWAP.
fx.time.stamps<-makeTimeStamps(data$time_stamp)
prices<-Cl(data)
fx.allt<-xts(prices,order.by=fx.time.stamps)
names(fx.allt)<-"fxrate"
fix.prices<-fx.allt[index(fx.allt,0)$hour==11 & index(fx.allt,0)$min==0] # vector of all 11am prices...
fix.dates<-as.Date(index(fix.prices,0))
fix.prices<-xts(fix.prices,fix.dates)
names(fix.prices)<-"fixing.rate"
hour10to11<-fx.allt[(index(fx.allt,0)$hour>=10 & index(fx.allt,0)$hour<11)] # A vector of all the prices from 10am - 11am NYT.
twap10to11<-aggregate(hour10to11$fxrate,as.Date(index(hour10to11,0)),mean) # THe TWAP from 10 to 11am NYT.
names(twap10to11)<-"twap"
temp<-merge.xts(fix.prices,twap10to11,join="inner") # this is done to resolve vector length issues.
potential.pl<-temp$fixing.rate-temp$twap
if (binary==TRUE) {
LHS<-sign(temp$fixing.rate-temp$twap)
names(LHS)<-"binary"
LHS[LHS$binary<0]<-0
LHS[LHS$binary>0]<-1
} else {
LHS<-temp$fixing.rate-temp$twap
}
lhs.l<-xts(rep(0,length(LHS)),index(LHS,0))
lhs.c<-xts(rep(0,length(LHS)),index(LHS,0))
lhs.v<-xts(rep(0,length(LHS)),index(LHS,0))
lhs.a<-xts(rep(0,length(LHS)),index(LHS,0))
LHS<-merge.xts(LHS,potential.pl,lhs.l,lhs.c,lhs.v,lhs.a)
LHS<-as.quantmod.OHLC(LHS,
col.names = c("Open", "High",
"Low", "Close",
"Volume", "Adjusted"),
name = NULL)
return(LHS)
}
makeTimeStamps<-function(rawts) {
# Takes raw time stamp data from histdata.com downloads and converts it into a POSIXct format
# that we can pass to xts or other time based functions.
dates<-apply(as.matrix(rawts),MARGIN=2,FUN=substr,1,8) # character vector of extracted dates
times<-apply(as.matrix(rawts),MARGIN=2,FUN=substr,10,15) # character vector of extracted times
# Add hypen to dates...
year<-substr(dates,1,4)
month<-substr(dates,5,6)
day<-substr(dates,7,8)
hour<-substr(times,1,2)
min<-substr(times,3,4)
sec<-substr(times,5,6)
newstamps<-paste(year,"-",month,"-",day," ",hour,":",min,":",sec,sep="")
ret<-strptime(newstamps,"%Y-%m-%d %H:%M:%S")
return(ret)
}
getData<-function(tickers,datasrc){
for (i in 1:length(tickers)){
cat(tickers[i],i,"\n")
getSymbols(tickers[i],src=datasrc,
auto.assign=getOption("getSymbols.auto.assign",TRUE),
env=parent.frame())
}
}
makeIndex<-function(x,inv,ret){
# Takes an xts object x and returns an index starting at 100 and evolving as the log returns of x.
# The inv flag tells whether or not to invert the series before calculating returns.
# The ret flag tells whether or not we have been passed a series of returns already.
init.val<-100
dts<-index(x,0)
if (inv==TRUE) data<-1/x else data<-x
if (ret==TRUE){ # we have a series of returns...
ret.series<-x
} else {
ret.series<-periodReturn(data,period="daily",subset=NULL,type="log")
dts<-index(ret.series,0)
}
n<-length(ret.series)
new.series<-ret.series
new.series[1]<-init.val
for (i in 2:n){
new.series[i]<-(1+ret.series[i-1])*new.series[i-1]
}
names(new.series)<-c("index")
return(new.series)
} # My custom index funtion for converting indices to 100 based at inception.
getOHLC<-function(assets,OHLC){
# Takes a list of assets and returns either the Open, High, Low, or Close depending
# on the passed value of HLOC. Return value is of type xts/zoo.
ret<-NULL
for (i in 1:length(assets)){
if (OHLC=="O" || OHLC=="Open"){
ret<-cbind(ret,assets[[i]][,1])
} else {
if (OHLC=="H" || OHLC=="High"){
ret<-cbind(ret,assets[[i]][,2])
} else {
if (OHLC=="L" || OHLC=="Low"){
ret<-cbind(ret,assets[[i]][,3])
} else {
if (OHLC=="C" || OHLC=="Close"){
ret<-cbind(ret,assets[[i]][,4])
}
}
}
}
}
return(ret)
}
runSamples<-function(years,trainedmodel,binary){
# this function will run through a bunch of years and compare the results to whatever model is stored
# in trainedmodel. trainedmodel should be of class "lm" or "glm".
# years should be a vector of years, for example: years=c("2008","2009","2010","2012")
retlist<-list()
for (i in 1:length(years)) {
newyear<-years[i]
if (years[i]=="2012" || years[i]=="2006") separ=c(",") else separ=c(";")
newdata<-read.csv(paste("~/R/R Projects/data/",newyear,"/DAT_ASCII_EURUSD_M1_",newyear,".csv",sep=""), sep=separ, quote="\"")
names(newdata)<-c("time_stamp","open_bid","high_bid","low_bid","close_bid","volume")
firstnewdate<-substr(newdata$time_stamp[1],0,8)
firstnewdate<-paste(substr(firstnewdate,0,4),"-",substr(firstnewdate,5,6),"-",substr(firstnewdate,7,8),"/",sep="")
cat(firstnewdate)
newLHS<-makeLHS(newdata,binary)
actuals.pips<-Hi(newLHS)
cat("new LHS created successfully...","\n")
newdf<-na.omit(merge.xts(Op(newLHS),OpCl(lag(IPC[firstnewdate],1)),join="left"))
newdf<-merge.xts(newdf,OpCl(lag(DOW,1)),join="inner")
newdf<-merge.xts(newdf,OpCl(lag(BSESN,1)),join="inner")
newdf<-merge.xts(newdf,OpCl(lag(GDAXI,1)),join="inner")
newdf<-merge.xts(newdf,OpCl(lag(SSMI,1)),join="inner")
newdf<-merge.xts(newdf,OpCl(lag(TA100,1)),join="inner")
newdf<-merge.xts(newdf,na.omit(lag(diff(DSWP2,1),1)),join="inner")
names(newdf)<-c("LHS.Open","IPC","DOW","BSESN","GDAXI","SSMI","TA100","DSWP2")
newdf<-merge.xts(newdf,na.omit(lag(Return.calculate(DEXUSAL),1)),join="inner") # AUDUSD
newdf<-merge.xts(newdf,na.omit(lag(Return.calculate(DEXINUS),1)),join="inner") # USDINR
newdf<-merge.xts(newdf,na.omit(lag(Return.calculate(DEXBZUS),1)),join="inner") # USDBRL
newdf<-merge.xts(newdf,na.omit(lag(Return.calculate(DEXCAUS),1)),join="inner") # USDCAD
newdf<-merge.xts(newdf,na.omit(lag(Return.calculate(DEXUSEU),1)),join="inner") # EURUSD
newdf<-merge.xts(newdf,na.omit(lag(Return.calculate(DEXJPUS),1)),join="inner") # USDJPY
newdf<-merge.xts(newdf,na.omit(lag(Return.calculate(DEXMXUS),1)),join="inner") # USDMXN
newdf<-merge.xts(newdf,na.omit(lag(Return.calculate(DEXKOUS),1)),join="inner") # USDKRW
dts<-as.Date(index(newdf,0))
if (binary) {
newmod<-glm(trainedmodel,data=newdf,family=binomial(link="logit"))
} else {
newmod<-lm(trainedmodel,data=newdf)
}
newdf<-merge.xts(newdf,na.omit(actuals.pips),join="inner") # Add the actuals.pips column, but after estimation...
newactuals<-as.vector(newdf$LHS.Open)
newfitted<-as.vector(fitted(newmod))
plot(newactuals,type="l",col="dark grey",main=paste("Fit vs. Actuals in Year= ",years[i]))
lines(newfitted,col="blue")
perf<-NULL
if (binary) {
for (j in 1:length(newfitted)){
if ((newfitted[j]>.5 && newactuals[j]>.5) || (newfitted[j]<.5 && newactuals[j]<.5)){
perf[j]<-1 # Trade was successful
} else {
perf[j]<-0 # Trade was not successful.
}
}
err.rate<-count(perf==0)$freq[2]/length(perf)
} else {
perf<-sign(newfitted)*sign(newactuals)
err.rate<-count(perf<0)$freq[2]/length(perf)
}
newdf<-merge.xts(newdf,perf,join="inner") # Add the performance stats...
retlist[[i]]<-data.frame(dts,newfitted,newdf$LHS.Open,perf,newdf$LHS.High)
names(retlist[[i]])<-c("dates","fitted","actual","sig.perf","actuals.pips")
cat("Sample year complete. Error rate was: ",round(err.rate,4),"Starting next sample year.","\n")
}
cat("Finished all years. Returning data list and exiting.","\n")
return(retlist)
} #
