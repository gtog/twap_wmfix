the_model.build<-buildModel(the_model,method='lm',training.per=c('2012-01-02','2012-03-23'))
LHS<-xts((fix.prices-twap10to11),as.Date(index(fix.prices,0)))
lhs.h<-xts(rep(0,length(LHS)),index(LHS,0))
lhs.l<-xts(rep(0,length(LHS)),index(LHS,0))
lhs.c<-xts(rep(0,length(LHS)),index(LHS,0))
lhs.v<-xts(rep(0,length(LHS)),index(LHS,0))
lhs.a<-xts(rep(0,length(LHS)),index(LHS,0))
LHS<-merge.xts(LHS,lhs.h,lhs.l,lhs.c,lhs.v,lhs.a)
LHS<-as.quantmod.OHLC(LHS,
col.names = c("Open", "High",
"Low", "Close",
"Volume", "Adjusted"),
name = NULL)
head(LHS)
makeTimeStamps<-function(rawts) {
# Takes raw time stamp data from histdata.com downloads and converts it into a POSIXct format
# that we can pass to xts or other time based functions.
dates<-apply(as.matrix(rawts),MARGIN=2,FUN=substr,1,8) # character vector of extracted dates
times<-apply(as.matrix(rawts),MARGIN=2,FUN=substr,10,15) # character vector of extracted times
# Add hypen to dates...
year<-substr(dates,1,4)
month<-substr(dates,5,6)
day<-substr(dates,7,8)
hour<-substr(times,1,2)
min<-substr(times,3,4)
sec<-substr(times,5,6)
newstamps<-paste(year,"-",month,"-",day," ",hour,":",min,":",sec,sep="")
ret<-strptime(newstamps,"%Y-%m-%d %H:%M:%S")
return(ret)
}
makeRHS<-function()
# We need to get our variables in the right format before we proceed. This basically means we need
# to convert the FX data we downloaded into xts/zoo format. The first step in doing so is creating
# a series of time stamps that are in a legitimate time based class supported by xts().
fx.time.stamps<-makeTimeStamps(eurusd.data$time_stamp) # This can now be used to make xts/zoo series...
data<-Cl(eurusd.data) # Op()=open, Hi()=high, Lo()=low, Cl()=close...
fx.allt<-xts(data,order.by=fx.time.stamps) # All of the FX data for this pair...
names(fx.allt)<-"fxrate"
fix.prices<-fx.allt[index(fx.allt,0)$hour==11 & index(fx.allt,0)$min==0] # A vector of all the 11am times. Our proxy for the WMR Fix.
hour10to11<-fx.allt[(index(fx.allt,0)$hour>=10 & index(fx.allt,0)$hour<11)] # A vector of all the prices from 10am - 11am NYT.
tempxts<-xts(as.vector(hour10to11),as.Date(index(hour10to11,0)))
twap10to11<-suppressWarnings(xts(as.vector(by(tempxts,index(tempxts,0),mean)),index(fix.prices,0))) #THe TWAP from 10 to 11am NYT.
names(twap10to11)<-"twap"
rm(tempxts)
LHS<-xts((fix.prices-twap10to11),as.Date(index(fix.prices,0)))
lhs.h<-xts(rep(0,length(LHS)),index(LHS,0))
lhs.l<-xts(rep(0,length(LHS)),index(LHS,0))
lhs.c<-xts(rep(0,length(LHS)),index(LHS,0))
lhs.v<-xts(rep(0,length(LHS)),index(LHS,0))
lhs.a<-xts(rep(0,length(LHS)),index(LHS,0))
LHS<-merge.xts(LHS,lhs.h,lhs.l,lhs.c,lhs.v,lhs.a)
LHS<-as.quantmod.OHLC(LHS,
col.names = c("Open", "High",
"Low", "Close",
"Volume", "Adjusted"),
name = NULL)
form<-as.formula(Op(LHS)~OpCl(MERV)+OpCl(BVSP)+OpCl(GSPTSE)+OpCl(IPC)+OpCl(GSPC)+OpCl(DOW)+OpCl(AORD)+OpCl(SSEC)+OpCl(HSI)+OpCl(BSESN)+
OpCl(JKSE)+OpCl(KLSE)+OpCl(N225)+OpCl(NZ50)+OpCl(STI)+OpCl(KS11)+OpCl(TWII)+OpCl(ATX)+OpCl(BFX)+OpCl(FCHI)+OpCl(GDAXI)+
OpCl(AEX)+OpCl(SSMI)+OpCl(FTSE)+OpCl(TA100)+OpCl(DJC)+OpCl(GD.AT))
the_model<-specifyModel(form,na.rm=TRUE)
the_model.build<-buildModel(the_model,method='lm',training.per=c('2012-01-02','2012-03-23'))
head(LHS)
makeTimeStamps<-function(rawts) {
# Takes raw time stamp data from histdata.com downloads and converts it into a POSIXct format
# that we can pass to xts or other time based functions.
dates<-apply(as.matrix(rawts),MARGIN=2,FUN=substr,1,8) # character vector of extracted dates
times<-apply(as.matrix(rawts),MARGIN=2,FUN=substr,10,15) # character vector of extracted times
# Add hypen to dates...
year<-substr(dates,1,4)
month<-substr(dates,5,6)
day<-substr(dates,7,8)
hour<-substr(times,1,2)
min<-substr(times,3,4)
sec<-substr(times,5,6)
newstamps<-paste(year,"-",month,"-",day," ",hour,":",min,":",sec,sep="")
ret<-strptime(newstamps,"%Y-%m-%d %H:%M:%S")
return(ret)
}
makeRHS<-function()
fx.time.stamps<-makeTimeStamps(eurusd.data$time_stamp) # This can now be used to make xts/zoo series...
data<-Cl(eurusd.data)
data<-Cl(eurusd.data)
head(data)
fix.prices<-fx.allt[index(fx.allt,0)$hour==11 & index(fx.allt,0)$min==0]
head(fix.prices)
hour10to11<-fx.allt[(index(fx.allt,0)$hour>=10 & index(fx.allt,0)$hour<11)]
head(hour10to11)
tempxts<-xts(as.vector(hour10to11),as.Date(index(hour10to11,0)))
head(tempxts)
tail(twapxts)
tail(tempxts)
twap10to11<-suppressWarnings(xts(as.vector(by(tempxts,index(tempxts,0),mean)),index(fix.prices,0)))
head(twap10to11)
tail(twap10to11)
twap10to11<-by(tempxts,index(tempxts,0),mean)
warnings()
twap10to11<-as.vector(by(tempxts,index(tempxts,0),mean))
head(twap10to11)
head(tempxts)
?by
class(index(tempxts,0))
temp<-data.frame(as.factor(index(tempxts,0)),tempxts)
rm(temp)
head(hour10to11)
?tapply
temp<-tapply(hour10to11,as.factor(index(hour10to11,0)),FUN=mean)
temp<-tapply(as.vector(hour10to11),as.factor(index(hour10to11,0)),FUN=mean)
temp<-aggregate(hour10to11$fxrate,as.Date(index(hour10to11)),mean)
head(temp)
rm(tempxts)
fix.prices<-fx.allt[index(fx.allt,0)$hour==11 & index(fx.allt,0)$min==0] # A vector of all the 11am times. Our proxy for the WMR Fix.
hour10to11<-fx.allt[(index(fx.allt,0)$hour>=10 & index(fx.allt,0)$hour<11)] # A vector of all the prices from 10am - 11am NYT.
twap10to11<-aggregate(hour10to11$fxrate,as.Date(index(hour10to11)),mean) #THe TWAP from 10 to 11am NYT.
names(twap10to11)<-"twap"
twap10to11<-xts(twap10to11,index(fix.prices,0))
head(twap10to11)
head(fix.prices)
fix.prices<-fx.allt[index(fx.allt,0)$hour==11 & index(fx.allt,0)$min==0] # A vector of all the 11am times. Our proxy for the WMR Fix.
names(fix.prices)<-"fixing.rate"
hour10to11<-fx.allt[(index(fx.allt,0)$hour>=10 & index(fx.allt,0)$hour<11)] # A vector of all the prices from 10am - 11am NYT.
twap10to11<-aggregate(hour10to11$fxrate,as.Date(index(hour10to11)),mean) #THe TWAP from 10 to 11am NYT.
names(twap10to11)<-"twap"
twap10to11<-xts(twap10to11,index(fix.prices,0))
LHS<-xts((fix.prices-twap10to11),as.Date(index(fix.prices,0)))
lhs.h<-xts(rep(0,length(LHS)),index(LHS,0))
lhs.l<-xts(rep(0,length(LHS)),index(LHS,0))
lhs.c<-xts(rep(0,length(LHS)),index(LHS,0))
lhs.v<-xts(rep(0,length(LHS)),index(LHS,0))
lhs.a<-xts(rep(0,length(LHS)),index(LHS,0))
LHS<-merge.xts(LHS,lhs.h,lhs.l,lhs.c,lhs.v,lhs.a)
LHS<-as.quantmod.OHLC(LHS,
col.names = c("Open", "High",
"Low", "Close",
"Volume", "Adjusted"),
name = NULL)
head(LHS)
form<-as.formula(Op(LHS)~OpCl(MERV)+OpCl(BVSP)+OpCl(GSPTSE)+OpCl(IPC)+OpCl(GSPC)+OpCl(DOW)+OpCl(AORD)+OpCl(SSEC)+OpCl(HSI)+OpCl(BSESN)+
OpCl(JKSE)+OpCl(KLSE)+OpCl(N225)+OpCl(NZ50)+OpCl(STI)+OpCl(KS11)+OpCl(TWII)+OpCl(ATX)+OpCl(BFX)+OpCl(FCHI)+OpCl(GDAXI)+
OpCl(AEX)+OpCl(SSMI)+OpCl(FTSE)+OpCl(TA100)+OpCl(DJC)+OpCl(GD.AT))
the_model<-specifyModel(form,na.rm=TRUE) # Specify the form of the model for quantmod...
the_model.build<-buildModel(the_model,method='lm',training.per=c('2012-01-02','2012-03-23')
)
the_model<-specifyModel(form,na.rm=TRUE) # Specify the form of the model for quantmod...
the_model.build<-buildModel(the_model,method='lm',training.per=c('2012-01-02','2012-03-23')) # build the model...
fittedModel(the_model.build) # fit the model...
summary(the_model.build) # Look at the reuslts.
step(form)
?step
step(the_model.build)
step(the_model)
step(fittedModel)
summary(the_model.build)
temp.model<-lm(Op(LHS) ~ OpCl(MERV) + OpCl(BVSP) + OpCl(GSPTSE) + OpCl(IPC) +   OpCl(GSPC) + OpCl(DOW) + OpCl(AORD) + OpCl(SSEC) + OpCl(HSI) +   OpCl(BSESN) + OpCl(JKSE) + OpCl(KLSE) + OpCl(N225) + OpCl(NZ50) +   OpCl(STI) + OpCl(KS11) + OpCl(TWII) + OpCl(ATX) + OpCl(BFX) +   OpCl(FCHI) + OpCl(GDAXI) + OpCl(AEX) + OpCl(SSMI) + OpCl(FTSE) +   OpCl(TA100) + OpCl(DJC) + OpCl(GD.AT))
length(OpCl(MERV))
length(LHS)
length(Op(LHS))
length(OpCl(LHS))
length(MERV)
length(LHS)
head(LHS)
length(Op(LHS))
length(Op(MERV))
summary(the_model.build) # Look at the reuslts.
head(MERV)
temp<-merge.xts(LHS,OpCl(MERV),join="outer")
head(temp)
temp<-merge.xts(LHS,OpCl(MERV),join="inner")
head(temp)
temp<-merge.xts(Op(LHS),OpCl(MERV),join="inner")
head(temp)
tail(temp)
the_model
the_model.build
fittedModel(the_model.build)
head(temp)
class(temp)
temp$LHS.Open
head(temp)
mean(temp$OpCl.MERV)
tempdf<-as.data.frame(temp)
class(tempdf)
head(tempdf)
temp<-merge.xts(Op(LHS),OpCl(MERV),join="inner")
head(temp)
temp<-merge.xts(temp,OpCl(BVSP),join="inner")
head(temp)
temp<-merge.xts(temp,OpCl(NZ50),join="inner")
temp<-merge.xts(Op(LHS),OpCl(MERV),join="inner")
temp<-merge.xts(temp,OpCl(BVSP),join="inner")
temp<-merge.xts(temp,OpCl(GSPTSE),join="inner")
temp<-merge.xts(temp,OpCl(IPC),join="inner")
temp<-merge.xts(temp,OpCl(GSPC),join="inner")
temp<-merge.xts(temp,OpCl(DOW),join="inner")
temp<-merge.xts(temp,OpCl(AORD),join="inner")
temp<-merge.xts(temp,OpCl(SSEC),join="inner")
temp<-merge.xts(temp,OpCl(HSI),join="inner")
temp<-merge.xts(temp,OpCl(BSESN),join="inner")
temp<-merge.xts(temp,OpCl(JKSE),join="inner")
temp<-merge.xts(temp,OpCl(KLSE),join="inner")
temp<-merge.xts(temp,OpCl(N225),join="inner")
temp<-merge.xts(temp,OpCl(NZ50),join="inner")
temp<-merge.xts(temp,OpCl(STI),join="inner")
temp<-merge.xts(temp,OpCl(KS11),join="inner")
temp<-merge.xts(temp,OpCl(TWII),join="inner")
temp<-merge.xts(temp,OpCl(ATX),join="inner")
temp<-merge.xts(temp,OpCl(BFX),join="inner")
temp<-merge.xts(temp,OpCl(FCHI),join="inner")
temp<-merge.xts(temp,OpCl(GDAXI),join="inner")
temp<-merge.xts(temp,OpCl(AEX),join="inner")
temp<-merge.xts(temp,OpCl(SSMI),join="inner")
temp<-merge.xts(temp,OpCl(FTSE),join="inner")
temp<-merge.xts(temp,OpCl(TA100),join="inner")
temp<-merge.xts(temp,OpCl(DJC),join="inner")
temp<-merge.xts(temp,OpCl(GD.AT),join="inner")
temp<-as.data.frame(temp)
head(temp)
temp<-merge.xts(Op(LHS),OpCl(MERV),join="inner")
temp<-merge.xts(temp,OpCl(BVSP),join="inner")
temp<-merge.xts(temp,OpCl(GSPTSE),join="inner")
temp<-merge.xts(temp,OpCl(IPC),join="inner")
temp<-merge.xts(temp,OpCl(GSPC),join="inner")
temp<-merge.xts(temp,OpCl(DOW),join="inner")
temp<-merge.xts(temp,OpCl(AORD),join="inner")
temp<-merge.xts(temp,OpCl(SSEC),join="inner")
temp<-merge.xts(temp,OpCl(HSI),join="inner")
temp<-merge.xts(temp,OpCl(BSESN),join="inner")
temp<-merge.xts(temp,OpCl(JKSE),join="inner")
temp<-merge.xts(temp,OpCl(KLSE),join="inner")
temp<-merge.xts(temp,OpCl(N225),join="inner")
temp<-merge.xts(temp,OpCl(NZ50),join="inner")
temp<-merge.xts(temp,OpCl(STI),join="inner")
temp<-merge.xts(temp,OpCl(KS11),join="inner")
temp<-merge.xts(temp,OpCl(TWII),join="inner")
temp<-merge.xts(temp,OpCl(ATX),join="inner")
temp<-merge.xts(temp,OpCl(BFX),join="inner")
temp<-merge.xts(temp,OpCl(FCHI),join="inner")
temp<-merge.xts(temp,OpCl(GDAXI),join="inner")
temp<-merge.xts(temp,OpCl(AEX),join="inner")
temp<-merge.xts(temp,OpCl(SSMI),join="inner")
temp<-merge.xts(temp,OpCl(FTSE),join="inner")
temp<-merge.xts(temp,OpCl(TA100),join="inner")
temp<-merge.xts(temp,OpCl(DJC),join="inner")
# Now we can have a look at our data and coerce it to a data frame:
temp<-as.data.frame(temp)
head(temp)
# Now we can have a look at our data and coerce it to a data frame:
temp<-as.data.frame(temp)
head(temp)
temp<-merge.xts(Op(LHS),OpCl(MERV),join="outer")
temp<-merge.xts(temp,OpCl(BVSP),join="outer")
temp<-merge.xts(temp,OpCl(GSPTSE),join="outer")
temp<-merge.xts(temp,OpCl(IPC),join="outer")
temp<-merge.xts(temp,OpCl(GSPC),join="outer")
temp<-merge.xts(temp,OpCl(DOW),join="outer")
temp<-merge.xts(temp,OpCl(AORD),join="outer")
temp<-merge.xts(temp,OpCl(SSEC),join="outer")
temp<-merge.xts(temp,OpCl(HSI),join="outer")
temp<-merge.xts(temp,OpCl(BSESN),join="outer")
temp<-merge.xts(temp,OpCl(JKSE),join="outer")
temp<-merge.xts(temp,OpCl(KLSE),join="outer")
temp<-merge.xts(temp,OpCl(N225),join="outer")
temp<-merge.xts(temp,OpCl(NZ50),join="outer")
temp<-merge.xts(temp,OpCl(STI),join="outer")
temp<-merge.xts(temp,OpCl(KS11),join="outer")
temp<-merge.xts(temp,OpCl(TWII),join="outer")
temp<-merge.xts(temp,OpCl(ATX),join="outer")
temp<-merge.xts(temp,OpCl(BFX),join="outer")
temp<-merge.xts(temp,OpCl(FCHI),join="outer")
temp<-merge.xts(temp,OpCl(GDAXI),join="outer")
temp<-merge.xts(temp,OpCl(AEX),join="outer")
temp<-merge.xts(temp,OpCl(SSMI),join="outer")
temp<-merge.xts(temp,OpCl(FTSE),join="outer")
temp<-merge.xts(temp,OpCl(TA100),join="outer")
temp<-merge.xts(temp,OpCl(DJC),join="outer")
# Now we can have a look at our data and coerce it to a data frame:
temp<-as.data.frame(temp)
head(temp)
temp<-merge.xts(Op(LHS),OpCl(MERV),join="outer")
head(temp)
tail(temp)
temp<-merge.xts(Op(LHS),OpCl(MERV),join="inner")
head(temp)
?merge.xts
temp<-merge.xts(Op(LHS),OpCl(MERV),join="left")
head(temp)
head(Op(LHS))
temp<-merge.xts(Op(LHS),OpCl(MERV),join="right")
head(temp)
temp<-merge.xts(Op(LHS),OpCl(MERV),join="inner")
head(temp)
temp<-merge.xts(Op(LHS),OpCl(MERV[first.date]),join="inner")
head(temp)
temp<-merge.xts(Op(LHS),OpCl(MERV[first.date]),join="left")
head(temp)
length(temp)
tail(temp)
tail(temp,50)
head(Op(LHS))
tail(Op(LHS))
length(Op(LHS))
temp<-merge.xts(Op(LHS),OpCl(MERV[first.date]),join="inner")
tail(temp)
temp<-merge.xts(Op(LHS),OpCl(MERV[first.date]),join="right")
head(temp)
tail(temp)
length(temp$LHS.Open)
length(MERV[first.date])
length(OpCl(MERV[first.date]))
temp<-merge.xts(Op(LHS),OpCl(MERV[first.date]),join="left")
head(temp)
length(temp$LHS.Open)
length(Op(LHS))
tail(temp)
?merge.xts
temp<-merge.zoo(Op(LHS),OpCl(MERV[first.date]),join="left")
temp<-merge(Op(LHS),OpCl(MERV[first.date]),join="left")
temp<-merge.xts(Op(LHS),OpCl(MERV[first.date]),join="left")
tail(temp)
temp<-na.omit(merge.xts(Op(LHS),OpCl(MERV[first.date]),join="left"))
head(temp)
tail(temp)
temp<-na.omit(merge.xts(Op(LHS),OpCl(MERV[first.date]),join="left"))
temp<-merge.xts(temp,OpCl(BVSP),join="inner")
head(temp)
tail(temp)
temp<-na.omit(merge.xts(Op(LHS),OpCl(MERV[first.date]),join="left"))
temp<-merge.xts(temp,OpCl(BVSP),join="inner")
temp<-merge.xts(temp,OpCl(GSPTSE),join="inner")
temp<-merge.xts(temp,OpCl(IPC),join="inner")
temp<-merge.xts(temp,OpCl(GSPC),join="inner")
temp<-merge.xts(temp,OpCl(DOW),join="inner")
temp<-merge.xts(temp,OpCl(AORD),join="inner")
temp<-merge.xts(temp,OpCl(SSEC),join="inner")
temp<-merge.xts(temp,OpCl(HSI),join="inner")
temp<-merge.xts(temp,OpCl(BSESN),join="inner")
temp<-merge.xts(temp,OpCl(JKSE),join="inner")
temp<-merge.xts(temp,OpCl(KLSE),join="inner")
temp<-merge.xts(temp,OpCl(N225),join="inner")
temp<-merge.xts(temp,OpCl(NZ50),join="inner")
temp<-merge.xts(temp,OpCl(STI),join="inner")
temp<-merge.xts(temp,OpCl(KS11),join="inner")
temp<-merge.xts(temp,OpCl(TWII),join="inner")
temp<-merge.xts(temp,OpCl(ATX),join="inner")
temp<-merge.xts(temp,OpCl(BFX),join="inner")
temp<-merge.xts(temp,OpCl(FCHI),join="inner")
temp<-merge.xts(temp,OpCl(GDAXI),join="inner")
temp<-merge.xts(temp,OpCl(AEX),join="inner")
temp<-merge.xts(temp,OpCl(SSMI),join="inner")
temp<-merge.xts(temp,OpCl(FTSE),join="inner")
temp<-merge.xts(temp,OpCl(TA100),join="inner")
temp<-merge.xts(temp,OpCl(DJC),join="inner")
temp<-as.data.frame(temp)
head(temp)
tail(temp)
temp<-na.omit(merge.xts(Op(LHS),OpCl(MERV[first.date]),join="left"))
names(temp)<-c("LHS.Open","OpCl.MERV")
temp<-merge.xts(temp,OpCl(BVSP),join="inner")
temp<-merge.xts(temp,OpCl(GSPTSE),join="inner")
temp<-merge.xts(temp,OpCl(IPC),join="inner")
temp<-merge.xts(temp,OpCl(GSPC),join="inner")
temp<-merge.xts(temp,OpCl(DOW),join="inner")
temp<-merge.xts(temp,OpCl(AORD),join="inner")
temp<-merge.xts(temp,OpCl(SSEC),join="inner")
temp<-merge.xts(temp,OpCl(HSI),join="inner")
temp<-merge.xts(temp,OpCl(BSESN),join="inner")
temp<-merge.xts(temp,OpCl(JKSE),join="inner")
temp<-merge.xts(temp,OpCl(KLSE),join="inner")
temp<-merge.xts(temp,OpCl(N225),join="inner")
temp<-merge.xts(temp,OpCl(NZ50),join="inner")
temp<-merge.xts(temp,OpCl(STI),join="inner")
temp<-merge.xts(temp,OpCl(KS11),join="inner")
temp<-merge.xts(temp,OpCl(TWII),join="inner")
temp<-merge.xts(temp,OpCl(ATX),join="inner")
temp<-merge.xts(temp,OpCl(BFX),join="inner")
temp<-merge.xts(temp,OpCl(FCHI),join="inner")
temp<-merge.xts(temp,OpCl(GDAXI),join="inner")
temp<-merge.xts(temp,OpCl(AEX),join="inner")
temp<-merge.xts(temp,OpCl(SSMI),join="inner")
temp<-merge.xts(temp,OpCl(FTSE),join="inner")
temp<-merge.xts(temp,OpCl(TA100),join="inner")
temp<-merge.xts(temp,OpCl(DJC),join="inner")
# Now we can have a look at our data and coerce it to a data frame:
temp<-as.data.frame(temp)
head(temp)
length(temp)
length(temp$LHS.Open)
temp
model.df<-as.data.frame(model.df)
head(model.df)
length(model.df$LHS.Open)
model.df<-na.omit(merge.xts(Op(LHS),OpCl(MERV[first.date]),join="left"))
names(model.df)<-c("LHS.Open","OpCl.MERV")
model.df<-merge.xts(model.df,OpCl(BVSP),join="inner")
model.df<-merge.xts(model.df,OpCl(GSPTSE),join="inner")
model.df<-merge.xts(model.df,OpCl(IPC),join="inner")
model.df<-merge.xts(model.df,OpCl(GSPC),join="inner")
model.df<-merge.xts(model.df,OpCl(DOW),join="inner")
model.df<-merge.xts(model.df,OpCl(AORD),join="inner")
model.df<-merge.xts(model.df,OpCl(SSEC),join="inner")
model.df<-merge.xts(model.df,OpCl(HSI),join="inner")
model.df<-merge.xts(model.df,OpCl(BSESN),join="inner")
model.df<-merge.xts(model.df,OpCl(JKSE),join="inner")
model.df<-merge.xts(model.df,OpCl(KLSE),join="inner")
model.df<-merge.xts(model.df,OpCl(N225),join="inner")
model.df<-merge.xts(model.df,OpCl(NZ50),join="inner")
model.df<-merge.xts(model.df,OpCl(STI),join="inner")
model.df<-merge.xts(model.df,OpCl(KS11),join="inner")
model.df<-merge.xts(model.df,OpCl(TWII),join="inner")
model.df<-merge.xts(model.df,OpCl(ATX),join="inner")
model.df<-merge.xts(model.df,OpCl(BFX),join="inner")
model.df<-merge.xts(model.df,OpCl(FCHI),join="inner")
model.df<-merge.xts(model.df,OpCl(GDAXI),join="inner")
model.df<-merge.xts(model.df,OpCl(AEX),join="inner")
model.df<-merge.xts(model.df,OpCl(SSMI),join="inner")
model.df<-merge.xts(model.df,OpCl(FTSE),join="inner")
model.df<-merge.xts(model.df,OpCl(TA100),join="inner")
model.df<-merge.xts(model.df,OpCl(DJC),join="inner")
model.df<-as.data.frame(model.df)
head(model.df)
length(model.df$LHS.Open)
?step
head(model.df)
fit<-lm(LHS.Open~.,data=model.df)
step(fit)
install.packages(c("glmulti", "leaps"))
require(glmulti)
require(leaps)
require(rJava)
require(MASS)
glmulti
?glmulti
fit1<-glmulti(LHS.Open~., data=model.df, level=1, crit=aicc,
fitfunc=lm, method=“l”, confsetsize=1024)
fit1<-glmulti(LHS.Open~., data=model.df, level=1, crit=aicc, fitfunc=lm, method=“l”, confsetsize=1024)
fit1<-glmulti(LHS.Open~., data=model.df, level=1, crit=aicc, fitfunc=lm, method="l", confsetsize=1024)
print(fit1)
fit2<-glmulti(LHS.Open~.*., data=model.df, level=1, crit=aicc, fitfunc=lm, method="l", confsetsize=1024)
print(fit2)
rm(fit2)
fit2<-glmulti(LHS.Open~., data=model.df, level=2, crit=aicc, fitfunc=lm, method="l", confsetsize=1024)
fit2<-glmulti(LHS.Open~., data=model.df, level=2, crit=aicc, fitfunc=lm, method="g", confsetsize=1024)
plot(fit1,type="p")
plot(aicvalues,complexity)
aicvalues<-summary(fit1)$icvalues
complexity<-fit1@K
allmodels<-fit1@objects
plot(aicvalues,complexity)
fit1<-glmulti(LHS.Open~., data=model.df, level=2, crit=aicc, fitfunc=lm, method="l", confsetsize=1024)
fit1<-glmulti(LHS.Open~., data=model.df, level=2, crit=aicc, fitfunc=lm, method="g", confsetsize=1024)
fit1<-glmulti(LHS.Open~., data=model.df, level=1, crit=aic, fitfunc=lm, method="l", confsetsize=100)
summary(fit1)
fit1<-glmulti(LHS.Open~.,
data=model.df,
intercept=TRUE,
level=1,
marginality=FALSE,
minsize=-1, # -1 = no constraint
maxsize=-1,
minK=-1,
maxK=-1,
crit=aic,
fitfunc=lm,
method="l", # "h"=exhaustive, "g"=genetic algorithm, "l"=very fast, exhaustive, branch and bound, "d"=simple summary
plotty=TRUE, #plot progression of IC profile while running...
report=TRUE,
confsetsize=1000)
summary(fit1)
summary(fit1[[1]])
class(fit1[[1]])
class(fit1)
getfit(fit1)
coef.glmulti(fit1)
summary.glmulti(fix1)
summary.glmulti(fit1)
weightable(fit1)
summary(weightable(fit1))
summary(fit1)
print(fit1$bestmodel)
print(fit1$bestmodel)
print(fit1[1]$bestmodel)
fit1$bestmodel
fit1[1]$bestmodel
fit1[[1]]]$bestmodel
fits1
fit1
fit1[[1]]
fit1[1]
head(fit1)
summary(fit1)
plot(fit1,type="p")
print(summary(fit1)$bestmodel)
plot(aicvalues,complexity)
head(model.df)
bestmod<-lm(LHS.Open~OpCl.IPC+OpCl.DOW+OpCl.BSESN+OpCl.GDAXI+OpCl.SSMI+OpCl.TA100, data=model.df)
bestmod
summary(bestmod)
bestmod<-lm(LHS.Open~1+OpCl.IPC+OpCl.DOW+OpCl.BSESN+OpCl.GDAXI+OpCl.SSMI+OpCl.TA100, data=model.df)
summary(bestmod)
residuals(bestmod)
plot(residuals(bestmod))
plot(residuals(bestmod),type="l")
?predict
summary(bestmod)
plot(bestmod)
plot(fitted(bestmod))
plot(LHS.Open,fitted(bestmod),data=model.df)
plot(LHS.Open)
plot(model.df$LHS.Open,fitted(bestmod))
plot(fitted(bestmod),model.df$LHS.Open)
length(fitted(bestmod))
plot(residuals(bestmod))
plot(residuals(bestmod),type="l")
